
009_KeyboardInterfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001374  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08001504  08001504  00002504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015ec  080015ec  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080015ec  080015ec  000025ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080015f4  080015f4  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015f4  080015f4  000025f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015f8  080015f8  000025f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080015fc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000988  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000036f  00000000  00000000  00003a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000118  00000000  00000000  00003d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000bf  00000000  00000000  00003e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d14  00000000  00000000  00003f57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a63  00000000  00000000  00006c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009851  00000000  00000000  000086ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011f1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b0c  00000000  00000000  00011f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00012a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080014ec 	.word	0x080014ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080014ec 	.word	0x080014ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <delay>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay(void){
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
	for(uint32_t i=0 ; i <= 300000;i++);
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	e002      	b.n	8000282 <delay+0x12>
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	3301      	adds	r3, #1
 8000280:	607b      	str	r3, [r7, #4]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	4a04      	ldr	r2, [pc, #16]	@ (8000298 <delay+0x28>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d9f8      	bls.n	800027c <delay+0xc>
}
 800028a:	bf00      	nop
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	bc80      	pop	{r7}
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	000493e0 	.word	0x000493e0

0800029c <main>:

int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0
	uint32_t volatile *const clkCtrlReg = 	   (uint32_t*)0x40023830;
 80002a2:	4b85      	ldr	r3, [pc, #532]	@ (80004b8 <main+0x21c>)
 80002a4:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const gpioDModeReg =   (uint32_t*)0x40020C00;
 80002a6:	4b85      	ldr	r3, [pc, #532]	@ (80004bc <main+0x220>)
 80002a8:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const gpioDInpReg =    (uint32_t*)0x40020C10;
 80002aa:	4b85      	ldr	r3, [pc, #532]	@ (80004c0 <main+0x224>)
 80002ac:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const gpioDOpReg =     (uint32_t*)0x40020C14;
 80002ae:	4b85      	ldr	r3, [pc, #532]	@ (80004c4 <main+0x228>)
 80002b0:	60bb      	str	r3, [r7, #8]
	uint32_t volatile *const gpioDPullUpReg = (uint32_t*)0x40020C0C;
 80002b2:	4b85      	ldr	r3, [pc, #532]	@ (80004c8 <main+0x22c>)
 80002b4:	607b      	str	r3, [r7, #4]



	*clkCtrlReg |= (0x1 << 3);
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f043 0208 	orr.w	r2, r3, #8
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	601a      	str	r2, [r3, #0]

	// setting input and output pin for rows(Output) and column(input)
	*gpioDModeReg &= ~(0xFF); 				// reset the bit
 80002c2:	693b      	ldr	r3, [r7, #16]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	601a      	str	r2, [r3, #0]
	*gpioDModeReg |=(0x55);		  			// setting as input for Columns (0-3) pins
 80002ce:	693b      	ldr	r3, [r7, #16]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f043 0255 	orr.w	r2, r3, #85	@ 0x55
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	601a      	str	r2, [r3, #0]

	*gpioDModeReg &= ~(0xFF << 16);			// clearing the bits
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 80002e2:	693b      	ldr	r3, [r7, #16]
 80002e4:	601a      	str	r2, [r3, #0]
	//*gpioDModeReg |= (0x00 << 16);		// setting as output for rows (8-11)pins

	// setting pull-Up register
	*gpioDPullUpReg |=(0x55 << 16);		 	// setting up pull up register for input to supress noise from the keypad
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f443 02aa 	orr.w	r2, r3, #5570560	@ 0x550000
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	601a      	str	r2, [r3, #0]



    /* Loop forever */
	while(1){
		*gpioDOpReg |= 0xF;				// makeing all rows high
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f043 020f 	orr.w	r2, r3, #15
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	601a      	str	r2, [r3, #0]
		*gpioDOpReg &= ~(0x1 << 0);		// setting 0th pin low rest all are high
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f023 0201 	bic.w	r2, r3, #1
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	601a      	str	r2, [r3, #0]

		if(*gpioDInpReg & (1 << 8)) {
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000312:	2b00      	cmp	r3, #0
 8000314:	d004      	beq.n	8000320 <main+0x84>
			delay();
 8000316:	f7ff ffab 	bl	8000270 <delay>
			printf("Pressed 1");
 800031a:	486c      	ldr	r0, [pc, #432]	@ (80004cc <main+0x230>)
 800031c:	f000 fa80 	bl	8000820 <iprintf>
		}
		if(*gpioDInpReg & (1 << 9)) {
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000328:	2b00      	cmp	r3, #0
 800032a:	d004      	beq.n	8000336 <main+0x9a>
			delay();
 800032c:	f7ff ffa0 	bl	8000270 <delay>
			printf("Pressed 2");
 8000330:	4867      	ldr	r0, [pc, #412]	@ (80004d0 <main+0x234>)
 8000332:	f000 fa75 	bl	8000820 <iprintf>
		}
		if(*gpioDInpReg & (1 << 10)){
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800033e:	2b00      	cmp	r3, #0
 8000340:	d004      	beq.n	800034c <main+0xb0>
			 delay();
 8000342:	f7ff ff95 	bl	8000270 <delay>
			 printf("Pressed 3");
 8000346:	4863      	ldr	r0, [pc, #396]	@ (80004d4 <main+0x238>)
 8000348:	f000 fa6a 	bl	8000820 <iprintf>
		}
		if(*gpioDInpReg & (1 << 11)){
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000354:	2b00      	cmp	r3, #0
 8000356:	d004      	beq.n	8000362 <main+0xc6>
			 delay();
 8000358:	f7ff ff8a 	bl	8000270 <delay>
			 printf("Pressed A");
 800035c:	485e      	ldr	r0, [pc, #376]	@ (80004d8 <main+0x23c>)
 800035e:	f000 fa5f 	bl	8000820 <iprintf>
		}

		*gpioDOpReg |= 0xF;				// again making all rows high
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	f043 020f 	orr.w	r2, r3, #15
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	601a      	str	r2, [r3, #0]
		*gpioDOpReg &= ~(0x1 << 1);		// setting 1st pin low remaining are high
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f023 0202 	bic.w	r2, r3, #2
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	601a      	str	r2, [r3, #0]
		if(*gpioDInpReg & (1 << 8)) {
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000382:	2b00      	cmp	r3, #0
 8000384:	d004      	beq.n	8000390 <main+0xf4>
			delay();
 8000386:	f7ff ff73 	bl	8000270 <delay>
			printf("Pressed 5") ;
 800038a:	4854      	ldr	r0, [pc, #336]	@ (80004dc <main+0x240>)
 800038c:	f000 fa48 	bl	8000820 <iprintf>
		}
		if(*gpioDInpReg & (1 << 9)) {
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000398:	2b00      	cmp	r3, #0
 800039a:	d004      	beq.n	80003a6 <main+0x10a>
			delay();
 800039c:	f7ff ff68 	bl	8000270 <delay>
			printf("Pressed 6") ;
 80003a0:	484f      	ldr	r0, [pc, #316]	@ (80004e0 <main+0x244>)
 80003a2:	f000 fa3d 	bl	8000820 <iprintf>
		}
		if(*gpioDInpReg & (1 << 10)){
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d004      	beq.n	80003bc <main+0x120>
			 delay();
 80003b2:	f7ff ff5d 	bl	8000270 <delay>
			 printf("Pressed 7") ;
 80003b6:	484b      	ldr	r0, [pc, #300]	@ (80004e4 <main+0x248>)
 80003b8:	f000 fa32 	bl	8000820 <iprintf>
		}
		if(*gpioDInpReg & (1 << 11)){
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d004      	beq.n	80003d2 <main+0x136>
			delay();
 80003c8:	f7ff ff52 	bl	8000270 <delay>
			printf("Pressed B") ;
 80003cc:	4846      	ldr	r0, [pc, #280]	@ (80004e8 <main+0x24c>)
 80003ce:	f000 fa27 	bl	8000820 <iprintf>
		}

		*gpioDOpReg |= 0xF;				// again making all rows high
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f043 020f 	orr.w	r2, r3, #15
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	601a      	str	r2, [r3, #0]
		*gpioDOpReg &= ~(0x1 << 2);		// setting 2nd pin low and rest high
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f023 0204 	bic.w	r2, r3, #4
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	601a      	str	r2, [r3, #0]
		if(*gpioDInpReg & (1 << 8)) {
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d004      	beq.n	8000400 <main+0x164>
			delay();
 80003f6:	f7ff ff3b 	bl	8000270 <delay>
			printf("Pressed 8") ;
 80003fa:	483c      	ldr	r0, [pc, #240]	@ (80004ec <main+0x250>)
 80003fc:	f000 fa10 	bl	8000820 <iprintf>
		}
		if(*gpioDInpReg & (1 << 9)) {
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000408:	2b00      	cmp	r3, #0
 800040a:	d004      	beq.n	8000416 <main+0x17a>
			delay();
 800040c:	f7ff ff30 	bl	8000270 <delay>
			printf("Pressed 9") ;
 8000410:	4837      	ldr	r0, [pc, #220]	@ (80004f0 <main+0x254>)
 8000412:	f000 fa05 	bl	8000820 <iprintf>
		}
		if(*gpioDInpReg & (1 << 10)){
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800041e:	2b00      	cmp	r3, #0
 8000420:	d004      	beq.n	800042c <main+0x190>
			delay();
 8000422:	f7ff ff25 	bl	8000270 <delay>
			printf("Pressed 7") ;
 8000426:	482f      	ldr	r0, [pc, #188]	@ (80004e4 <main+0x248>)
 8000428:	f000 f9fa 	bl	8000820 <iprintf>
		}
		if(*gpioDInpReg & (1 << 11)){
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000434:	2b00      	cmp	r3, #0
 8000436:	d004      	beq.n	8000442 <main+0x1a6>
			delay();
 8000438:	f7ff ff1a 	bl	8000270 <delay>
			printf("Pressed C") ;
 800043c:	482d      	ldr	r0, [pc, #180]	@ (80004f4 <main+0x258>)
 800043e:	f000 f9ef 	bl	8000820 <iprintf>
		}

		*gpioDOpReg |= 0xF;				// make all rows high again
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f043 020f 	orr.w	r2, r3, #15
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	601a      	str	r2, [r3, #0]
		*gpioDOpReg &= ~(0x1 << 3);		// set 3rd pin low
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f023 0208 	bic.w	r2, r3, #8
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	601a      	str	r2, [r3, #0]
		if(*gpioDInpReg & (1 << 8)) {
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000462:	2b00      	cmp	r3, #0
 8000464:	d004      	beq.n	8000470 <main+0x1d4>
			delay();
 8000466:	f7ff ff03 	bl	8000270 <delay>
			printf("Pressed *") ;
 800046a:	4823      	ldr	r0, [pc, #140]	@ (80004f8 <main+0x25c>)
 800046c:	f000 f9d8 	bl	8000820 <iprintf>
		}
		if(*gpioDInpReg & (1 << 9)) {
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000478:	2b00      	cmp	r3, #0
 800047a:	d004      	beq.n	8000486 <main+0x1ea>
			delay();
 800047c:	f7ff fef8 	bl	8000270 <delay>
			printf("Pressed 0") ;
 8000480:	481e      	ldr	r0, [pc, #120]	@ (80004fc <main+0x260>)
 8000482:	f000 f9cd 	bl	8000820 <iprintf>
		}
		if(*gpioDInpReg & (1 << 10)){
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800048e:	2b00      	cmp	r3, #0
 8000490:	d004      	beq.n	800049c <main+0x200>
			delay();
 8000492:	f7ff feed 	bl	8000270 <delay>
			printf("Pressed #") ;
 8000496:	481a      	ldr	r0, [pc, #104]	@ (8000500 <main+0x264>)
 8000498:	f000 f9c2 	bl	8000820 <iprintf>
		}
		if(*gpioDInpReg & (1 << 11)){
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	f43f af24 	beq.w	80002f2 <main+0x56>
			delay();
 80004aa:	f7ff fee1 	bl	8000270 <delay>
			printf("Pressed D") ;
 80004ae:	4815      	ldr	r0, [pc, #84]	@ (8000504 <main+0x268>)
 80004b0:	f000 f9b6 	bl	8000820 <iprintf>
		*gpioDOpReg |= 0xF;				// makeing all rows high
 80004b4:	e71d      	b.n	80002f2 <main+0x56>
 80004b6:	bf00      	nop
 80004b8:	40023830 	.word	0x40023830
 80004bc:	40020c00 	.word	0x40020c00
 80004c0:	40020c10 	.word	0x40020c10
 80004c4:	40020c14 	.word	0x40020c14
 80004c8:	40020c0c 	.word	0x40020c0c
 80004cc:	08001504 	.word	0x08001504
 80004d0:	08001510 	.word	0x08001510
 80004d4:	0800151c 	.word	0x0800151c
 80004d8:	08001528 	.word	0x08001528
 80004dc:	08001534 	.word	0x08001534
 80004e0:	08001540 	.word	0x08001540
 80004e4:	0800154c 	.word	0x0800154c
 80004e8:	08001558 	.word	0x08001558
 80004ec:	08001564 	.word	0x08001564
 80004f0:	08001570 	.word	0x08001570
 80004f4:	0800157c 	.word	0x0800157c
 80004f8:	08001588 	.word	0x08001588
 80004fc:	08001594 	.word	0x08001594
 8000500:	080015a0 	.word	0x080015a0
 8000504:	080015ac 	.word	0x080015ac

08000508 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	e00a      	b.n	8000530 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800051a:	f3af 8000 	nop.w
 800051e:	4601      	mov	r1, r0
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	1c5a      	adds	r2, r3, #1
 8000524:	60ba      	str	r2, [r7, #8]
 8000526:	b2ca      	uxtb	r2, r1
 8000528:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	3301      	adds	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
 8000530:	697a      	ldr	r2, [r7, #20]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	dbf0      	blt.n	800051a <_read+0x12>
  }

  return len;
 8000538:	687b      	ldr	r3, [r7, #4]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	af00      	add	r7, sp, #0
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	e009      	b.n	8000568 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	60ba      	str	r2, [r7, #8]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4618      	mov	r0, r3
 800055e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3301      	adds	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	dbf1      	blt.n	8000554 <_write+0x12>
  }
  return len;
 8000570:	687b      	ldr	r3, [r7, #4]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <_close>:

int _close(int file)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000586:	4618      	mov	r0, r3
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005a0:	605a      	str	r2, [r3, #4]
  return 0;
 80005a2:	2300      	movs	r3, #0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <_isatty>:

int _isatty(int file)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005b6:	2301      	movs	r3, #1
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b085      	sub	sp, #20
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	60f8      	str	r0, [r7, #12]
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005ce:	2300      	movs	r3, #0
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr
	...

080005dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005e4:	4a14      	ldr	r2, [pc, #80]	@ (8000638 <_sbrk+0x5c>)
 80005e6:	4b15      	ldr	r3, [pc, #84]	@ (800063c <_sbrk+0x60>)
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f0:	4b13      	ldr	r3, [pc, #76]	@ (8000640 <_sbrk+0x64>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d102      	bne.n	80005fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <_sbrk+0x64>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	@ (8000644 <_sbrk+0x68>)
 80005fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005fe:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <_sbrk+0x64>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	429a      	cmp	r2, r3
 800060a:	d207      	bcs.n	800061c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800060c:	f000 f9ac 	bl	8000968 <__errno>
 8000610:	4603      	mov	r3, r0
 8000612:	220c      	movs	r2, #12
 8000614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	e009      	b.n	8000630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800061c:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <_sbrk+0x64>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000622:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <_sbrk+0x64>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	4a05      	ldr	r2, [pc, #20]	@ (8000640 <_sbrk+0x64>)
 800062c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800062e:	68fb      	ldr	r3, [r7, #12]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20020000 	.word	0x20020000
 800063c:	00000400 	.word	0x00000400
 8000640:	20000078 	.word	0x20000078
 8000644:	200001c8 	.word	0x200001c8

08000648 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000648:	480d      	ldr	r0, [pc, #52]	@ (8000680 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800064a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800064c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <LoopForever+0x6>)
  ldr r1, =_edata
 8000652:	490d      	ldr	r1, [pc, #52]	@ (8000688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000654:	4a0d      	ldr	r2, [pc, #52]	@ (800068c <LoopForever+0xe>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000658:	e002      	b.n	8000660 <LoopCopyDataInit>

0800065a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800065c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065e:	3304      	adds	r3, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000664:	d3f9      	bcc.n	800065a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000666:	4a0a      	ldr	r2, [pc, #40]	@ (8000690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000668:	4c0a      	ldr	r4, [pc, #40]	@ (8000694 <LoopForever+0x16>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800066c:	e001      	b.n	8000672 <LoopFillZerobss>

0800066e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000670:	3204      	adds	r2, #4

08000672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000674:	d3fb      	bcc.n	800066e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000676:	f000 f97d 	bl	8000974 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 800067a:	f7ff fe0f 	bl	800029c <main>

0800067e <LoopForever>:

LoopForever:
  b LoopForever
 800067e:	e7fe      	b.n	800067e <LoopForever>
  ldr   r0, =_estack
 8000680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800068c:	080015fc 	.word	0x080015fc
  ldr r2, =_sbss
 8000690:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000694:	200001c8 	.word	0x200001c8

08000698 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC_IRQHandler>
	...

0800069c <std>:
 800069c:	2300      	movs	r3, #0
 800069e:	b510      	push	{r4, lr}
 80006a0:	4604      	mov	r4, r0
 80006a2:	e9c0 3300 	strd	r3, r3, [r0]
 80006a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006aa:	6083      	str	r3, [r0, #8]
 80006ac:	8181      	strh	r1, [r0, #12]
 80006ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80006b0:	81c2      	strh	r2, [r0, #14]
 80006b2:	6183      	str	r3, [r0, #24]
 80006b4:	4619      	mov	r1, r3
 80006b6:	2208      	movs	r2, #8
 80006b8:	305c      	adds	r0, #92	@ 0x5c
 80006ba:	f000 f906 	bl	80008ca <memset>
 80006be:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <std+0x58>)
 80006c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80006c2:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <std+0x5c>)
 80006c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006c6:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <std+0x60>)
 80006c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80006ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <std+0x64>)
 80006cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80006ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <std+0x68>)
 80006d0:	6224      	str	r4, [r4, #32]
 80006d2:	429c      	cmp	r4, r3
 80006d4:	d006      	beq.n	80006e4 <std+0x48>
 80006d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006da:	4294      	cmp	r4, r2
 80006dc:	d002      	beq.n	80006e4 <std+0x48>
 80006de:	33d0      	adds	r3, #208	@ 0xd0
 80006e0:	429c      	cmp	r4, r3
 80006e2:	d105      	bne.n	80006f0 <std+0x54>
 80006e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80006e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ec:	f000 b966 	b.w	80009bc <__retarget_lock_init_recursive>
 80006f0:	bd10      	pop	{r4, pc}
 80006f2:	bf00      	nop
 80006f4:	08000845 	.word	0x08000845
 80006f8:	08000867 	.word	0x08000867
 80006fc:	0800089f 	.word	0x0800089f
 8000700:	080008c3 	.word	0x080008c3
 8000704:	2000007c 	.word	0x2000007c

08000708 <stdio_exit_handler>:
 8000708:	4a02      	ldr	r2, [pc, #8]	@ (8000714 <stdio_exit_handler+0xc>)
 800070a:	4903      	ldr	r1, [pc, #12]	@ (8000718 <stdio_exit_handler+0x10>)
 800070c:	4803      	ldr	r0, [pc, #12]	@ (800071c <stdio_exit_handler+0x14>)
 800070e:	f000 b869 	b.w	80007e4 <_fwalk_sglue>
 8000712:	bf00      	nop
 8000714:	20000000 	.word	0x20000000
 8000718:	0800124d 	.word	0x0800124d
 800071c:	20000010 	.word	0x20000010

08000720 <cleanup_stdio>:
 8000720:	6841      	ldr	r1, [r0, #4]
 8000722:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <cleanup_stdio+0x34>)
 8000724:	4299      	cmp	r1, r3
 8000726:	b510      	push	{r4, lr}
 8000728:	4604      	mov	r4, r0
 800072a:	d001      	beq.n	8000730 <cleanup_stdio+0x10>
 800072c:	f000 fd8e 	bl	800124c <_fflush_r>
 8000730:	68a1      	ldr	r1, [r4, #8]
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <cleanup_stdio+0x38>)
 8000734:	4299      	cmp	r1, r3
 8000736:	d002      	beq.n	800073e <cleanup_stdio+0x1e>
 8000738:	4620      	mov	r0, r4
 800073a:	f000 fd87 	bl	800124c <_fflush_r>
 800073e:	68e1      	ldr	r1, [r4, #12]
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <cleanup_stdio+0x3c>)
 8000742:	4299      	cmp	r1, r3
 8000744:	d004      	beq.n	8000750 <cleanup_stdio+0x30>
 8000746:	4620      	mov	r0, r4
 8000748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800074c:	f000 bd7e 	b.w	800124c <_fflush_r>
 8000750:	bd10      	pop	{r4, pc}
 8000752:	bf00      	nop
 8000754:	2000007c 	.word	0x2000007c
 8000758:	200000e4 	.word	0x200000e4
 800075c:	2000014c 	.word	0x2000014c

08000760 <global_stdio_init.part.0>:
 8000760:	b510      	push	{r4, lr}
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <global_stdio_init.part.0+0x30>)
 8000764:	4c0b      	ldr	r4, [pc, #44]	@ (8000794 <global_stdio_init.part.0+0x34>)
 8000766:	4a0c      	ldr	r2, [pc, #48]	@ (8000798 <global_stdio_init.part.0+0x38>)
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	4620      	mov	r0, r4
 800076c:	2200      	movs	r2, #0
 800076e:	2104      	movs	r1, #4
 8000770:	f7ff ff94 	bl	800069c <std>
 8000774:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000778:	2201      	movs	r2, #1
 800077a:	2109      	movs	r1, #9
 800077c:	f7ff ff8e 	bl	800069c <std>
 8000780:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000784:	2202      	movs	r2, #2
 8000786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800078a:	2112      	movs	r1, #18
 800078c:	f7ff bf86 	b.w	800069c <std>
 8000790:	200001b4 	.word	0x200001b4
 8000794:	2000007c 	.word	0x2000007c
 8000798:	08000709 	.word	0x08000709

0800079c <__sfp_lock_acquire>:
 800079c:	4801      	ldr	r0, [pc, #4]	@ (80007a4 <__sfp_lock_acquire+0x8>)
 800079e:	f000 b90e 	b.w	80009be <__retarget_lock_acquire_recursive>
 80007a2:	bf00      	nop
 80007a4:	200001bd 	.word	0x200001bd

080007a8 <__sfp_lock_release>:
 80007a8:	4801      	ldr	r0, [pc, #4]	@ (80007b0 <__sfp_lock_release+0x8>)
 80007aa:	f000 b909 	b.w	80009c0 <__retarget_lock_release_recursive>
 80007ae:	bf00      	nop
 80007b0:	200001bd 	.word	0x200001bd

080007b4 <__sinit>:
 80007b4:	b510      	push	{r4, lr}
 80007b6:	4604      	mov	r4, r0
 80007b8:	f7ff fff0 	bl	800079c <__sfp_lock_acquire>
 80007bc:	6a23      	ldr	r3, [r4, #32]
 80007be:	b11b      	cbz	r3, 80007c8 <__sinit+0x14>
 80007c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007c4:	f7ff bff0 	b.w	80007a8 <__sfp_lock_release>
 80007c8:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <__sinit+0x28>)
 80007ca:	6223      	str	r3, [r4, #32]
 80007cc:	4b04      	ldr	r3, [pc, #16]	@ (80007e0 <__sinit+0x2c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f5      	bne.n	80007c0 <__sinit+0xc>
 80007d4:	f7ff ffc4 	bl	8000760 <global_stdio_init.part.0>
 80007d8:	e7f2      	b.n	80007c0 <__sinit+0xc>
 80007da:	bf00      	nop
 80007dc:	08000721 	.word	0x08000721
 80007e0:	200001b4 	.word	0x200001b4

080007e4 <_fwalk_sglue>:
 80007e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007e8:	4607      	mov	r7, r0
 80007ea:	4688      	mov	r8, r1
 80007ec:	4614      	mov	r4, r2
 80007ee:	2600      	movs	r6, #0
 80007f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007f4:	f1b9 0901 	subs.w	r9, r9, #1
 80007f8:	d505      	bpl.n	8000806 <_fwalk_sglue+0x22>
 80007fa:	6824      	ldr	r4, [r4, #0]
 80007fc:	2c00      	cmp	r4, #0
 80007fe:	d1f7      	bne.n	80007f0 <_fwalk_sglue+0xc>
 8000800:	4630      	mov	r0, r6
 8000802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000806:	89ab      	ldrh	r3, [r5, #12]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d907      	bls.n	800081c <_fwalk_sglue+0x38>
 800080c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000810:	3301      	adds	r3, #1
 8000812:	d003      	beq.n	800081c <_fwalk_sglue+0x38>
 8000814:	4629      	mov	r1, r5
 8000816:	4638      	mov	r0, r7
 8000818:	47c0      	blx	r8
 800081a:	4306      	orrs	r6, r0
 800081c:	3568      	adds	r5, #104	@ 0x68
 800081e:	e7e9      	b.n	80007f4 <_fwalk_sglue+0x10>

08000820 <iprintf>:
 8000820:	b40f      	push	{r0, r1, r2, r3}
 8000822:	b507      	push	{r0, r1, r2, lr}
 8000824:	4906      	ldr	r1, [pc, #24]	@ (8000840 <iprintf+0x20>)
 8000826:	ab04      	add	r3, sp, #16
 8000828:	6808      	ldr	r0, [r1, #0]
 800082a:	f853 2b04 	ldr.w	r2, [r3], #4
 800082e:	6881      	ldr	r1, [r0, #8]
 8000830:	9301      	str	r3, [sp, #4]
 8000832:	f000 f9e7 	bl	8000c04 <_vfiprintf_r>
 8000836:	b003      	add	sp, #12
 8000838:	f85d eb04 	ldr.w	lr, [sp], #4
 800083c:	b004      	add	sp, #16
 800083e:	4770      	bx	lr
 8000840:	2000000c 	.word	0x2000000c

08000844 <__sread>:
 8000844:	b510      	push	{r4, lr}
 8000846:	460c      	mov	r4, r1
 8000848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800084c:	f000 f868 	bl	8000920 <_read_r>
 8000850:	2800      	cmp	r0, #0
 8000852:	bfab      	itete	ge
 8000854:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000856:	89a3      	ldrhlt	r3, [r4, #12]
 8000858:	181b      	addge	r3, r3, r0
 800085a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800085e:	bfac      	ite	ge
 8000860:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000862:	81a3      	strhlt	r3, [r4, #12]
 8000864:	bd10      	pop	{r4, pc}

08000866 <__swrite>:
 8000866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800086a:	461f      	mov	r7, r3
 800086c:	898b      	ldrh	r3, [r1, #12]
 800086e:	05db      	lsls	r3, r3, #23
 8000870:	4605      	mov	r5, r0
 8000872:	460c      	mov	r4, r1
 8000874:	4616      	mov	r6, r2
 8000876:	d505      	bpl.n	8000884 <__swrite+0x1e>
 8000878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800087c:	2302      	movs	r3, #2
 800087e:	2200      	movs	r2, #0
 8000880:	f000 f83c 	bl	80008fc <_lseek_r>
 8000884:	89a3      	ldrh	r3, [r4, #12]
 8000886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800088a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800088e:	81a3      	strh	r3, [r4, #12]
 8000890:	4632      	mov	r2, r6
 8000892:	463b      	mov	r3, r7
 8000894:	4628      	mov	r0, r5
 8000896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800089a:	f000 b853 	b.w	8000944 <_write_r>

0800089e <__sseek>:
 800089e:	b510      	push	{r4, lr}
 80008a0:	460c      	mov	r4, r1
 80008a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008a6:	f000 f829 	bl	80008fc <_lseek_r>
 80008aa:	1c43      	adds	r3, r0, #1
 80008ac:	89a3      	ldrh	r3, [r4, #12]
 80008ae:	bf15      	itete	ne
 80008b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008ba:	81a3      	strheq	r3, [r4, #12]
 80008bc:	bf18      	it	ne
 80008be:	81a3      	strhne	r3, [r4, #12]
 80008c0:	bd10      	pop	{r4, pc}

080008c2 <__sclose>:
 80008c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008c6:	f000 b809 	b.w	80008dc <_close_r>

080008ca <memset>:
 80008ca:	4402      	add	r2, r0
 80008cc:	4603      	mov	r3, r0
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d100      	bne.n	80008d4 <memset+0xa>
 80008d2:	4770      	bx	lr
 80008d4:	f803 1b01 	strb.w	r1, [r3], #1
 80008d8:	e7f9      	b.n	80008ce <memset+0x4>
	...

080008dc <_close_r>:
 80008dc:	b538      	push	{r3, r4, r5, lr}
 80008de:	4d06      	ldr	r5, [pc, #24]	@ (80008f8 <_close_r+0x1c>)
 80008e0:	2300      	movs	r3, #0
 80008e2:	4604      	mov	r4, r0
 80008e4:	4608      	mov	r0, r1
 80008e6:	602b      	str	r3, [r5, #0]
 80008e8:	f7ff fe47 	bl	800057a <_close>
 80008ec:	1c43      	adds	r3, r0, #1
 80008ee:	d102      	bne.n	80008f6 <_close_r+0x1a>
 80008f0:	682b      	ldr	r3, [r5, #0]
 80008f2:	b103      	cbz	r3, 80008f6 <_close_r+0x1a>
 80008f4:	6023      	str	r3, [r4, #0]
 80008f6:	bd38      	pop	{r3, r4, r5, pc}
 80008f8:	200001b8 	.word	0x200001b8

080008fc <_lseek_r>:
 80008fc:	b538      	push	{r3, r4, r5, lr}
 80008fe:	4d07      	ldr	r5, [pc, #28]	@ (800091c <_lseek_r+0x20>)
 8000900:	4604      	mov	r4, r0
 8000902:	4608      	mov	r0, r1
 8000904:	4611      	mov	r1, r2
 8000906:	2200      	movs	r2, #0
 8000908:	602a      	str	r2, [r5, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	f7ff fe59 	bl	80005c2 <_lseek>
 8000910:	1c43      	adds	r3, r0, #1
 8000912:	d102      	bne.n	800091a <_lseek_r+0x1e>
 8000914:	682b      	ldr	r3, [r5, #0]
 8000916:	b103      	cbz	r3, 800091a <_lseek_r+0x1e>
 8000918:	6023      	str	r3, [r4, #0]
 800091a:	bd38      	pop	{r3, r4, r5, pc}
 800091c:	200001b8 	.word	0x200001b8

08000920 <_read_r>:
 8000920:	b538      	push	{r3, r4, r5, lr}
 8000922:	4d07      	ldr	r5, [pc, #28]	@ (8000940 <_read_r+0x20>)
 8000924:	4604      	mov	r4, r0
 8000926:	4608      	mov	r0, r1
 8000928:	4611      	mov	r1, r2
 800092a:	2200      	movs	r2, #0
 800092c:	602a      	str	r2, [r5, #0]
 800092e:	461a      	mov	r2, r3
 8000930:	f7ff fdea 	bl	8000508 <_read>
 8000934:	1c43      	adds	r3, r0, #1
 8000936:	d102      	bne.n	800093e <_read_r+0x1e>
 8000938:	682b      	ldr	r3, [r5, #0]
 800093a:	b103      	cbz	r3, 800093e <_read_r+0x1e>
 800093c:	6023      	str	r3, [r4, #0]
 800093e:	bd38      	pop	{r3, r4, r5, pc}
 8000940:	200001b8 	.word	0x200001b8

08000944 <_write_r>:
 8000944:	b538      	push	{r3, r4, r5, lr}
 8000946:	4d07      	ldr	r5, [pc, #28]	@ (8000964 <_write_r+0x20>)
 8000948:	4604      	mov	r4, r0
 800094a:	4608      	mov	r0, r1
 800094c:	4611      	mov	r1, r2
 800094e:	2200      	movs	r2, #0
 8000950:	602a      	str	r2, [r5, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	f7ff fdf5 	bl	8000542 <_write>
 8000958:	1c43      	adds	r3, r0, #1
 800095a:	d102      	bne.n	8000962 <_write_r+0x1e>
 800095c:	682b      	ldr	r3, [r5, #0]
 800095e:	b103      	cbz	r3, 8000962 <_write_r+0x1e>
 8000960:	6023      	str	r3, [r4, #0]
 8000962:	bd38      	pop	{r3, r4, r5, pc}
 8000964:	200001b8 	.word	0x200001b8

08000968 <__errno>:
 8000968:	4b01      	ldr	r3, [pc, #4]	@ (8000970 <__errno+0x8>)
 800096a:	6818      	ldr	r0, [r3, #0]
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	2000000c 	.word	0x2000000c

08000974 <__libc_init_array>:
 8000974:	b570      	push	{r4, r5, r6, lr}
 8000976:	4d0d      	ldr	r5, [pc, #52]	@ (80009ac <__libc_init_array+0x38>)
 8000978:	4c0d      	ldr	r4, [pc, #52]	@ (80009b0 <__libc_init_array+0x3c>)
 800097a:	1b64      	subs	r4, r4, r5
 800097c:	10a4      	asrs	r4, r4, #2
 800097e:	2600      	movs	r6, #0
 8000980:	42a6      	cmp	r6, r4
 8000982:	d109      	bne.n	8000998 <__libc_init_array+0x24>
 8000984:	4d0b      	ldr	r5, [pc, #44]	@ (80009b4 <__libc_init_array+0x40>)
 8000986:	4c0c      	ldr	r4, [pc, #48]	@ (80009b8 <__libc_init_array+0x44>)
 8000988:	f000 fdb0 	bl	80014ec <_init>
 800098c:	1b64      	subs	r4, r4, r5
 800098e:	10a4      	asrs	r4, r4, #2
 8000990:	2600      	movs	r6, #0
 8000992:	42a6      	cmp	r6, r4
 8000994:	d105      	bne.n	80009a2 <__libc_init_array+0x2e>
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f855 3b04 	ldr.w	r3, [r5], #4
 800099c:	4798      	blx	r3
 800099e:	3601      	adds	r6, #1
 80009a0:	e7ee      	b.n	8000980 <__libc_init_array+0xc>
 80009a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009a6:	4798      	blx	r3
 80009a8:	3601      	adds	r6, #1
 80009aa:	e7f2      	b.n	8000992 <__libc_init_array+0x1e>
 80009ac:	080015f4 	.word	0x080015f4
 80009b0:	080015f4 	.word	0x080015f4
 80009b4:	080015f4 	.word	0x080015f4
 80009b8:	080015f8 	.word	0x080015f8

080009bc <__retarget_lock_init_recursive>:
 80009bc:	4770      	bx	lr

080009be <__retarget_lock_acquire_recursive>:
 80009be:	4770      	bx	lr

080009c0 <__retarget_lock_release_recursive>:
 80009c0:	4770      	bx	lr
	...

080009c4 <_free_r>:
 80009c4:	b538      	push	{r3, r4, r5, lr}
 80009c6:	4605      	mov	r5, r0
 80009c8:	2900      	cmp	r1, #0
 80009ca:	d041      	beq.n	8000a50 <_free_r+0x8c>
 80009cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009d0:	1f0c      	subs	r4, r1, #4
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	bfb8      	it	lt
 80009d6:	18e4      	addlt	r4, r4, r3
 80009d8:	f000 f8e0 	bl	8000b9c <__malloc_lock>
 80009dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a54 <_free_r+0x90>)
 80009de:	6813      	ldr	r3, [r2, #0]
 80009e0:	b933      	cbnz	r3, 80009f0 <_free_r+0x2c>
 80009e2:	6063      	str	r3, [r4, #4]
 80009e4:	6014      	str	r4, [r2, #0]
 80009e6:	4628      	mov	r0, r5
 80009e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80009ec:	f000 b8dc 	b.w	8000ba8 <__malloc_unlock>
 80009f0:	42a3      	cmp	r3, r4
 80009f2:	d908      	bls.n	8000a06 <_free_r+0x42>
 80009f4:	6820      	ldr	r0, [r4, #0]
 80009f6:	1821      	adds	r1, r4, r0
 80009f8:	428b      	cmp	r3, r1
 80009fa:	bf01      	itttt	eq
 80009fc:	6819      	ldreq	r1, [r3, #0]
 80009fe:	685b      	ldreq	r3, [r3, #4]
 8000a00:	1809      	addeq	r1, r1, r0
 8000a02:	6021      	streq	r1, [r4, #0]
 8000a04:	e7ed      	b.n	80009e2 <_free_r+0x1e>
 8000a06:	461a      	mov	r2, r3
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	b10b      	cbz	r3, 8000a10 <_free_r+0x4c>
 8000a0c:	42a3      	cmp	r3, r4
 8000a0e:	d9fa      	bls.n	8000a06 <_free_r+0x42>
 8000a10:	6811      	ldr	r1, [r2, #0]
 8000a12:	1850      	adds	r0, r2, r1
 8000a14:	42a0      	cmp	r0, r4
 8000a16:	d10b      	bne.n	8000a30 <_free_r+0x6c>
 8000a18:	6820      	ldr	r0, [r4, #0]
 8000a1a:	4401      	add	r1, r0
 8000a1c:	1850      	adds	r0, r2, r1
 8000a1e:	4283      	cmp	r3, r0
 8000a20:	6011      	str	r1, [r2, #0]
 8000a22:	d1e0      	bne.n	80009e6 <_free_r+0x22>
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	6053      	str	r3, [r2, #4]
 8000a2a:	4408      	add	r0, r1
 8000a2c:	6010      	str	r0, [r2, #0]
 8000a2e:	e7da      	b.n	80009e6 <_free_r+0x22>
 8000a30:	d902      	bls.n	8000a38 <_free_r+0x74>
 8000a32:	230c      	movs	r3, #12
 8000a34:	602b      	str	r3, [r5, #0]
 8000a36:	e7d6      	b.n	80009e6 <_free_r+0x22>
 8000a38:	6820      	ldr	r0, [r4, #0]
 8000a3a:	1821      	adds	r1, r4, r0
 8000a3c:	428b      	cmp	r3, r1
 8000a3e:	bf04      	itt	eq
 8000a40:	6819      	ldreq	r1, [r3, #0]
 8000a42:	685b      	ldreq	r3, [r3, #4]
 8000a44:	6063      	str	r3, [r4, #4]
 8000a46:	bf04      	itt	eq
 8000a48:	1809      	addeq	r1, r1, r0
 8000a4a:	6021      	streq	r1, [r4, #0]
 8000a4c:	6054      	str	r4, [r2, #4]
 8000a4e:	e7ca      	b.n	80009e6 <_free_r+0x22>
 8000a50:	bd38      	pop	{r3, r4, r5, pc}
 8000a52:	bf00      	nop
 8000a54:	200001c4 	.word	0x200001c4

08000a58 <sbrk_aligned>:
 8000a58:	b570      	push	{r4, r5, r6, lr}
 8000a5a:	4e0f      	ldr	r6, [pc, #60]	@ (8000a98 <sbrk_aligned+0x40>)
 8000a5c:	460c      	mov	r4, r1
 8000a5e:	6831      	ldr	r1, [r6, #0]
 8000a60:	4605      	mov	r5, r0
 8000a62:	b911      	cbnz	r1, 8000a6a <sbrk_aligned+0x12>
 8000a64:	f000 fcae 	bl	80013c4 <_sbrk_r>
 8000a68:	6030      	str	r0, [r6, #0]
 8000a6a:	4621      	mov	r1, r4
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	f000 fca9 	bl	80013c4 <_sbrk_r>
 8000a72:	1c43      	adds	r3, r0, #1
 8000a74:	d103      	bne.n	8000a7e <sbrk_aligned+0x26>
 8000a76:	f04f 34ff 	mov.w	r4, #4294967295
 8000a7a:	4620      	mov	r0, r4
 8000a7c:	bd70      	pop	{r4, r5, r6, pc}
 8000a7e:	1cc4      	adds	r4, r0, #3
 8000a80:	f024 0403 	bic.w	r4, r4, #3
 8000a84:	42a0      	cmp	r0, r4
 8000a86:	d0f8      	beq.n	8000a7a <sbrk_aligned+0x22>
 8000a88:	1a21      	subs	r1, r4, r0
 8000a8a:	4628      	mov	r0, r5
 8000a8c:	f000 fc9a 	bl	80013c4 <_sbrk_r>
 8000a90:	3001      	adds	r0, #1
 8000a92:	d1f2      	bne.n	8000a7a <sbrk_aligned+0x22>
 8000a94:	e7ef      	b.n	8000a76 <sbrk_aligned+0x1e>
 8000a96:	bf00      	nop
 8000a98:	200001c0 	.word	0x200001c0

08000a9c <_malloc_r>:
 8000a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000aa0:	1ccd      	adds	r5, r1, #3
 8000aa2:	f025 0503 	bic.w	r5, r5, #3
 8000aa6:	3508      	adds	r5, #8
 8000aa8:	2d0c      	cmp	r5, #12
 8000aaa:	bf38      	it	cc
 8000aac:	250c      	movcc	r5, #12
 8000aae:	2d00      	cmp	r5, #0
 8000ab0:	4606      	mov	r6, r0
 8000ab2:	db01      	blt.n	8000ab8 <_malloc_r+0x1c>
 8000ab4:	42a9      	cmp	r1, r5
 8000ab6:	d904      	bls.n	8000ac2 <_malloc_r+0x26>
 8000ab8:	230c      	movs	r3, #12
 8000aba:	6033      	str	r3, [r6, #0]
 8000abc:	2000      	movs	r0, #0
 8000abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000ac2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b98 <_malloc_r+0xfc>
 8000ac6:	f000 f869 	bl	8000b9c <__malloc_lock>
 8000aca:	f8d8 3000 	ldr.w	r3, [r8]
 8000ace:	461c      	mov	r4, r3
 8000ad0:	bb44      	cbnz	r4, 8000b24 <_malloc_r+0x88>
 8000ad2:	4629      	mov	r1, r5
 8000ad4:	4630      	mov	r0, r6
 8000ad6:	f7ff ffbf 	bl	8000a58 <sbrk_aligned>
 8000ada:	1c43      	adds	r3, r0, #1
 8000adc:	4604      	mov	r4, r0
 8000ade:	d158      	bne.n	8000b92 <_malloc_r+0xf6>
 8000ae0:	f8d8 4000 	ldr.w	r4, [r8]
 8000ae4:	4627      	mov	r7, r4
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d143      	bne.n	8000b72 <_malloc_r+0xd6>
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d04b      	beq.n	8000b86 <_malloc_r+0xea>
 8000aee:	6823      	ldr	r3, [r4, #0]
 8000af0:	4639      	mov	r1, r7
 8000af2:	4630      	mov	r0, r6
 8000af4:	eb04 0903 	add.w	r9, r4, r3
 8000af8:	f000 fc64 	bl	80013c4 <_sbrk_r>
 8000afc:	4581      	cmp	r9, r0
 8000afe:	d142      	bne.n	8000b86 <_malloc_r+0xea>
 8000b00:	6821      	ldr	r1, [r4, #0]
 8000b02:	1a6d      	subs	r5, r5, r1
 8000b04:	4629      	mov	r1, r5
 8000b06:	4630      	mov	r0, r6
 8000b08:	f7ff ffa6 	bl	8000a58 <sbrk_aligned>
 8000b0c:	3001      	adds	r0, #1
 8000b0e:	d03a      	beq.n	8000b86 <_malloc_r+0xea>
 8000b10:	6823      	ldr	r3, [r4, #0]
 8000b12:	442b      	add	r3, r5
 8000b14:	6023      	str	r3, [r4, #0]
 8000b16:	f8d8 3000 	ldr.w	r3, [r8]
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	bb62      	cbnz	r2, 8000b78 <_malloc_r+0xdc>
 8000b1e:	f8c8 7000 	str.w	r7, [r8]
 8000b22:	e00f      	b.n	8000b44 <_malloc_r+0xa8>
 8000b24:	6822      	ldr	r2, [r4, #0]
 8000b26:	1b52      	subs	r2, r2, r5
 8000b28:	d420      	bmi.n	8000b6c <_malloc_r+0xd0>
 8000b2a:	2a0b      	cmp	r2, #11
 8000b2c:	d917      	bls.n	8000b5e <_malloc_r+0xc2>
 8000b2e:	1961      	adds	r1, r4, r5
 8000b30:	42a3      	cmp	r3, r4
 8000b32:	6025      	str	r5, [r4, #0]
 8000b34:	bf18      	it	ne
 8000b36:	6059      	strne	r1, [r3, #4]
 8000b38:	6863      	ldr	r3, [r4, #4]
 8000b3a:	bf08      	it	eq
 8000b3c:	f8c8 1000 	streq.w	r1, [r8]
 8000b40:	5162      	str	r2, [r4, r5]
 8000b42:	604b      	str	r3, [r1, #4]
 8000b44:	4630      	mov	r0, r6
 8000b46:	f000 f82f 	bl	8000ba8 <__malloc_unlock>
 8000b4a:	f104 000b 	add.w	r0, r4, #11
 8000b4e:	1d23      	adds	r3, r4, #4
 8000b50:	f020 0007 	bic.w	r0, r0, #7
 8000b54:	1ac2      	subs	r2, r0, r3
 8000b56:	bf1c      	itt	ne
 8000b58:	1a1b      	subne	r3, r3, r0
 8000b5a:	50a3      	strne	r3, [r4, r2]
 8000b5c:	e7af      	b.n	8000abe <_malloc_r+0x22>
 8000b5e:	6862      	ldr	r2, [r4, #4]
 8000b60:	42a3      	cmp	r3, r4
 8000b62:	bf0c      	ite	eq
 8000b64:	f8c8 2000 	streq.w	r2, [r8]
 8000b68:	605a      	strne	r2, [r3, #4]
 8000b6a:	e7eb      	b.n	8000b44 <_malloc_r+0xa8>
 8000b6c:	4623      	mov	r3, r4
 8000b6e:	6864      	ldr	r4, [r4, #4]
 8000b70:	e7ae      	b.n	8000ad0 <_malloc_r+0x34>
 8000b72:	463c      	mov	r4, r7
 8000b74:	687f      	ldr	r7, [r7, #4]
 8000b76:	e7b6      	b.n	8000ae6 <_malloc_r+0x4a>
 8000b78:	461a      	mov	r2, r3
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	42a3      	cmp	r3, r4
 8000b7e:	d1fb      	bne.n	8000b78 <_malloc_r+0xdc>
 8000b80:	2300      	movs	r3, #0
 8000b82:	6053      	str	r3, [r2, #4]
 8000b84:	e7de      	b.n	8000b44 <_malloc_r+0xa8>
 8000b86:	230c      	movs	r3, #12
 8000b88:	6033      	str	r3, [r6, #0]
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	f000 f80c 	bl	8000ba8 <__malloc_unlock>
 8000b90:	e794      	b.n	8000abc <_malloc_r+0x20>
 8000b92:	6005      	str	r5, [r0, #0]
 8000b94:	e7d6      	b.n	8000b44 <_malloc_r+0xa8>
 8000b96:	bf00      	nop
 8000b98:	200001c4 	.word	0x200001c4

08000b9c <__malloc_lock>:
 8000b9c:	4801      	ldr	r0, [pc, #4]	@ (8000ba4 <__malloc_lock+0x8>)
 8000b9e:	f7ff bf0e 	b.w	80009be <__retarget_lock_acquire_recursive>
 8000ba2:	bf00      	nop
 8000ba4:	200001bc 	.word	0x200001bc

08000ba8 <__malloc_unlock>:
 8000ba8:	4801      	ldr	r0, [pc, #4]	@ (8000bb0 <__malloc_unlock+0x8>)
 8000baa:	f7ff bf09 	b.w	80009c0 <__retarget_lock_release_recursive>
 8000bae:	bf00      	nop
 8000bb0:	200001bc 	.word	0x200001bc

08000bb4 <__sfputc_r>:
 8000bb4:	6893      	ldr	r3, [r2, #8]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	b410      	push	{r4}
 8000bbc:	6093      	str	r3, [r2, #8]
 8000bbe:	da07      	bge.n	8000bd0 <__sfputc_r+0x1c>
 8000bc0:	6994      	ldr	r4, [r2, #24]
 8000bc2:	42a3      	cmp	r3, r4
 8000bc4:	db01      	blt.n	8000bca <__sfputc_r+0x16>
 8000bc6:	290a      	cmp	r1, #10
 8000bc8:	d102      	bne.n	8000bd0 <__sfputc_r+0x1c>
 8000bca:	bc10      	pop	{r4}
 8000bcc:	f000 bb66 	b.w	800129c <__swbuf_r>
 8000bd0:	6813      	ldr	r3, [r2, #0]
 8000bd2:	1c58      	adds	r0, r3, #1
 8000bd4:	6010      	str	r0, [r2, #0]
 8000bd6:	7019      	strb	r1, [r3, #0]
 8000bd8:	4608      	mov	r0, r1
 8000bda:	bc10      	pop	{r4}
 8000bdc:	4770      	bx	lr

08000bde <__sfputs_r>:
 8000bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000be0:	4606      	mov	r6, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	4614      	mov	r4, r2
 8000be6:	18d5      	adds	r5, r2, r3
 8000be8:	42ac      	cmp	r4, r5
 8000bea:	d101      	bne.n	8000bf0 <__sfputs_r+0x12>
 8000bec:	2000      	movs	r0, #0
 8000bee:	e007      	b.n	8000c00 <__sfputs_r+0x22>
 8000bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bf4:	463a      	mov	r2, r7
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	f7ff ffdc 	bl	8000bb4 <__sfputc_r>
 8000bfc:	1c43      	adds	r3, r0, #1
 8000bfe:	d1f3      	bne.n	8000be8 <__sfputs_r+0xa>
 8000c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c04 <_vfiprintf_r>:
 8000c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c08:	460d      	mov	r5, r1
 8000c0a:	b09d      	sub	sp, #116	@ 0x74
 8000c0c:	4614      	mov	r4, r2
 8000c0e:	4698      	mov	r8, r3
 8000c10:	4606      	mov	r6, r0
 8000c12:	b118      	cbz	r0, 8000c1c <_vfiprintf_r+0x18>
 8000c14:	6a03      	ldr	r3, [r0, #32]
 8000c16:	b90b      	cbnz	r3, 8000c1c <_vfiprintf_r+0x18>
 8000c18:	f7ff fdcc 	bl	80007b4 <__sinit>
 8000c1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c1e:	07d9      	lsls	r1, r3, #31
 8000c20:	d405      	bmi.n	8000c2e <_vfiprintf_r+0x2a>
 8000c22:	89ab      	ldrh	r3, [r5, #12]
 8000c24:	059a      	lsls	r2, r3, #22
 8000c26:	d402      	bmi.n	8000c2e <_vfiprintf_r+0x2a>
 8000c28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c2a:	f7ff fec8 	bl	80009be <__retarget_lock_acquire_recursive>
 8000c2e:	89ab      	ldrh	r3, [r5, #12]
 8000c30:	071b      	lsls	r3, r3, #28
 8000c32:	d501      	bpl.n	8000c38 <_vfiprintf_r+0x34>
 8000c34:	692b      	ldr	r3, [r5, #16]
 8000c36:	b99b      	cbnz	r3, 8000c60 <_vfiprintf_r+0x5c>
 8000c38:	4629      	mov	r1, r5
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	f000 fb6c 	bl	8001318 <__swsetup_r>
 8000c40:	b170      	cbz	r0, 8000c60 <_vfiprintf_r+0x5c>
 8000c42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c44:	07dc      	lsls	r4, r3, #31
 8000c46:	d504      	bpl.n	8000c52 <_vfiprintf_r+0x4e>
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	b01d      	add	sp, #116	@ 0x74
 8000c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c52:	89ab      	ldrh	r3, [r5, #12]
 8000c54:	0598      	lsls	r0, r3, #22
 8000c56:	d4f7      	bmi.n	8000c48 <_vfiprintf_r+0x44>
 8000c58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c5a:	f7ff feb1 	bl	80009c0 <__retarget_lock_release_recursive>
 8000c5e:	e7f3      	b.n	8000c48 <_vfiprintf_r+0x44>
 8000c60:	2300      	movs	r3, #0
 8000c62:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c64:	2320      	movs	r3, #32
 8000c66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000c6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c6e:	2330      	movs	r3, #48	@ 0x30
 8000c70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000e20 <_vfiprintf_r+0x21c>
 8000c74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000c78:	f04f 0901 	mov.w	r9, #1
 8000c7c:	4623      	mov	r3, r4
 8000c7e:	469a      	mov	sl, r3
 8000c80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c84:	b10a      	cbz	r2, 8000c8a <_vfiprintf_r+0x86>
 8000c86:	2a25      	cmp	r2, #37	@ 0x25
 8000c88:	d1f9      	bne.n	8000c7e <_vfiprintf_r+0x7a>
 8000c8a:	ebba 0b04 	subs.w	fp, sl, r4
 8000c8e:	d00b      	beq.n	8000ca8 <_vfiprintf_r+0xa4>
 8000c90:	465b      	mov	r3, fp
 8000c92:	4622      	mov	r2, r4
 8000c94:	4629      	mov	r1, r5
 8000c96:	4630      	mov	r0, r6
 8000c98:	f7ff ffa1 	bl	8000bde <__sfputs_r>
 8000c9c:	3001      	adds	r0, #1
 8000c9e:	f000 80a7 	beq.w	8000df0 <_vfiprintf_r+0x1ec>
 8000ca2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000ca4:	445a      	add	r2, fp
 8000ca6:	9209      	str	r2, [sp, #36]	@ 0x24
 8000ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	f000 809f 	beq.w	8000df0 <_vfiprintf_r+0x1ec>
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cbc:	f10a 0a01 	add.w	sl, sl, #1
 8000cc0:	9304      	str	r3, [sp, #16]
 8000cc2:	9307      	str	r3, [sp, #28]
 8000cc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000cc8:	931a      	str	r3, [sp, #104]	@ 0x68
 8000cca:	4654      	mov	r4, sl
 8000ccc:	2205      	movs	r2, #5
 8000cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cd2:	4853      	ldr	r0, [pc, #332]	@ (8000e20 <_vfiprintf_r+0x21c>)
 8000cd4:	f7ff fa7c 	bl	80001d0 <memchr>
 8000cd8:	9a04      	ldr	r2, [sp, #16]
 8000cda:	b9d8      	cbnz	r0, 8000d14 <_vfiprintf_r+0x110>
 8000cdc:	06d1      	lsls	r1, r2, #27
 8000cde:	bf44      	itt	mi
 8000ce0:	2320      	movmi	r3, #32
 8000ce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ce6:	0713      	lsls	r3, r2, #28
 8000ce8:	bf44      	itt	mi
 8000cea:	232b      	movmi	r3, #43	@ 0x2b
 8000cec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8000cf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8000cf6:	d015      	beq.n	8000d24 <_vfiprintf_r+0x120>
 8000cf8:	9a07      	ldr	r2, [sp, #28]
 8000cfa:	4654      	mov	r4, sl
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f04f 0c0a 	mov.w	ip, #10
 8000d02:	4621      	mov	r1, r4
 8000d04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d08:	3b30      	subs	r3, #48	@ 0x30
 8000d0a:	2b09      	cmp	r3, #9
 8000d0c:	d94b      	bls.n	8000da6 <_vfiprintf_r+0x1a2>
 8000d0e:	b1b0      	cbz	r0, 8000d3e <_vfiprintf_r+0x13a>
 8000d10:	9207      	str	r2, [sp, #28]
 8000d12:	e014      	b.n	8000d3e <_vfiprintf_r+0x13a>
 8000d14:	eba0 0308 	sub.w	r3, r0, r8
 8000d18:	fa09 f303 	lsl.w	r3, r9, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	9304      	str	r3, [sp, #16]
 8000d20:	46a2      	mov	sl, r4
 8000d22:	e7d2      	b.n	8000cca <_vfiprintf_r+0xc6>
 8000d24:	9b03      	ldr	r3, [sp, #12]
 8000d26:	1d19      	adds	r1, r3, #4
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	9103      	str	r1, [sp, #12]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	bfbb      	ittet	lt
 8000d30:	425b      	neglt	r3, r3
 8000d32:	f042 0202 	orrlt.w	r2, r2, #2
 8000d36:	9307      	strge	r3, [sp, #28]
 8000d38:	9307      	strlt	r3, [sp, #28]
 8000d3a:	bfb8      	it	lt
 8000d3c:	9204      	strlt	r2, [sp, #16]
 8000d3e:	7823      	ldrb	r3, [r4, #0]
 8000d40:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d42:	d10a      	bne.n	8000d5a <_vfiprintf_r+0x156>
 8000d44:	7863      	ldrb	r3, [r4, #1]
 8000d46:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d48:	d132      	bne.n	8000db0 <_vfiprintf_r+0x1ac>
 8000d4a:	9b03      	ldr	r3, [sp, #12]
 8000d4c:	1d1a      	adds	r2, r3, #4
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	9203      	str	r2, [sp, #12]
 8000d52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000d56:	3402      	adds	r4, #2
 8000d58:	9305      	str	r3, [sp, #20]
 8000d5a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8000e24 <_vfiprintf_r+0x220>
 8000d5e:	7821      	ldrb	r1, [r4, #0]
 8000d60:	2203      	movs	r2, #3
 8000d62:	4650      	mov	r0, sl
 8000d64:	f7ff fa34 	bl	80001d0 <memchr>
 8000d68:	b138      	cbz	r0, 8000d7a <_vfiprintf_r+0x176>
 8000d6a:	9b04      	ldr	r3, [sp, #16]
 8000d6c:	eba0 000a 	sub.w	r0, r0, sl
 8000d70:	2240      	movs	r2, #64	@ 0x40
 8000d72:	4082      	lsls	r2, r0
 8000d74:	4313      	orrs	r3, r2
 8000d76:	3401      	adds	r4, #1
 8000d78:	9304      	str	r3, [sp, #16]
 8000d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d7e:	482a      	ldr	r0, [pc, #168]	@ (8000e28 <_vfiprintf_r+0x224>)
 8000d80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000d84:	2206      	movs	r2, #6
 8000d86:	f7ff fa23 	bl	80001d0 <memchr>
 8000d8a:	2800      	cmp	r0, #0
 8000d8c:	d03f      	beq.n	8000e0e <_vfiprintf_r+0x20a>
 8000d8e:	4b27      	ldr	r3, [pc, #156]	@ (8000e2c <_vfiprintf_r+0x228>)
 8000d90:	bb1b      	cbnz	r3, 8000dda <_vfiprintf_r+0x1d6>
 8000d92:	9b03      	ldr	r3, [sp, #12]
 8000d94:	3307      	adds	r3, #7
 8000d96:	f023 0307 	bic.w	r3, r3, #7
 8000d9a:	3308      	adds	r3, #8
 8000d9c:	9303      	str	r3, [sp, #12]
 8000d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000da0:	443b      	add	r3, r7
 8000da2:	9309      	str	r3, [sp, #36]	@ 0x24
 8000da4:	e76a      	b.n	8000c7c <_vfiprintf_r+0x78>
 8000da6:	fb0c 3202 	mla	r2, ip, r2, r3
 8000daa:	460c      	mov	r4, r1
 8000dac:	2001      	movs	r0, #1
 8000dae:	e7a8      	b.n	8000d02 <_vfiprintf_r+0xfe>
 8000db0:	2300      	movs	r3, #0
 8000db2:	3401      	adds	r4, #1
 8000db4:	9305      	str	r3, [sp, #20]
 8000db6:	4619      	mov	r1, r3
 8000db8:	f04f 0c0a 	mov.w	ip, #10
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000dc2:	3a30      	subs	r2, #48	@ 0x30
 8000dc4:	2a09      	cmp	r2, #9
 8000dc6:	d903      	bls.n	8000dd0 <_vfiprintf_r+0x1cc>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d0c6      	beq.n	8000d5a <_vfiprintf_r+0x156>
 8000dcc:	9105      	str	r1, [sp, #20]
 8000dce:	e7c4      	b.n	8000d5a <_vfiprintf_r+0x156>
 8000dd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000dd4:	4604      	mov	r4, r0
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e7f0      	b.n	8000dbc <_vfiprintf_r+0x1b8>
 8000dda:	ab03      	add	r3, sp, #12
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	462a      	mov	r2, r5
 8000de0:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <_vfiprintf_r+0x22c>)
 8000de2:	a904      	add	r1, sp, #16
 8000de4:	4630      	mov	r0, r6
 8000de6:	f3af 8000 	nop.w
 8000dea:	4607      	mov	r7, r0
 8000dec:	1c78      	adds	r0, r7, #1
 8000dee:	d1d6      	bne.n	8000d9e <_vfiprintf_r+0x19a>
 8000df0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000df2:	07d9      	lsls	r1, r3, #31
 8000df4:	d405      	bmi.n	8000e02 <_vfiprintf_r+0x1fe>
 8000df6:	89ab      	ldrh	r3, [r5, #12]
 8000df8:	059a      	lsls	r2, r3, #22
 8000dfa:	d402      	bmi.n	8000e02 <_vfiprintf_r+0x1fe>
 8000dfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000dfe:	f7ff fddf 	bl	80009c0 <__retarget_lock_release_recursive>
 8000e02:	89ab      	ldrh	r3, [r5, #12]
 8000e04:	065b      	lsls	r3, r3, #25
 8000e06:	f53f af1f 	bmi.w	8000c48 <_vfiprintf_r+0x44>
 8000e0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e0c:	e71e      	b.n	8000c4c <_vfiprintf_r+0x48>
 8000e0e:	ab03      	add	r3, sp, #12
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	462a      	mov	r2, r5
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <_vfiprintf_r+0x22c>)
 8000e16:	a904      	add	r1, sp, #16
 8000e18:	4630      	mov	r0, r6
 8000e1a:	f000 f879 	bl	8000f10 <_printf_i>
 8000e1e:	e7e4      	b.n	8000dea <_vfiprintf_r+0x1e6>
 8000e20:	080015b6 	.word	0x080015b6
 8000e24:	080015bc 	.word	0x080015bc
 8000e28:	080015c0 	.word	0x080015c0
 8000e2c:	00000000 	.word	0x00000000
 8000e30:	08000bdf 	.word	0x08000bdf

08000e34 <_printf_common>:
 8000e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e38:	4616      	mov	r6, r2
 8000e3a:	4698      	mov	r8, r3
 8000e3c:	688a      	ldr	r2, [r1, #8]
 8000e3e:	690b      	ldr	r3, [r1, #16]
 8000e40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e44:	4293      	cmp	r3, r2
 8000e46:	bfb8      	it	lt
 8000e48:	4613      	movlt	r3, r2
 8000e4a:	6033      	str	r3, [r6, #0]
 8000e4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000e50:	4607      	mov	r7, r0
 8000e52:	460c      	mov	r4, r1
 8000e54:	b10a      	cbz	r2, 8000e5a <_printf_common+0x26>
 8000e56:	3301      	adds	r3, #1
 8000e58:	6033      	str	r3, [r6, #0]
 8000e5a:	6823      	ldr	r3, [r4, #0]
 8000e5c:	0699      	lsls	r1, r3, #26
 8000e5e:	bf42      	ittt	mi
 8000e60:	6833      	ldrmi	r3, [r6, #0]
 8000e62:	3302      	addmi	r3, #2
 8000e64:	6033      	strmi	r3, [r6, #0]
 8000e66:	6825      	ldr	r5, [r4, #0]
 8000e68:	f015 0506 	ands.w	r5, r5, #6
 8000e6c:	d106      	bne.n	8000e7c <_printf_common+0x48>
 8000e6e:	f104 0a19 	add.w	sl, r4, #25
 8000e72:	68e3      	ldr	r3, [r4, #12]
 8000e74:	6832      	ldr	r2, [r6, #0]
 8000e76:	1a9b      	subs	r3, r3, r2
 8000e78:	42ab      	cmp	r3, r5
 8000e7a:	dc26      	bgt.n	8000eca <_printf_common+0x96>
 8000e7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000e80:	6822      	ldr	r2, [r4, #0]
 8000e82:	3b00      	subs	r3, #0
 8000e84:	bf18      	it	ne
 8000e86:	2301      	movne	r3, #1
 8000e88:	0692      	lsls	r2, r2, #26
 8000e8a:	d42b      	bmi.n	8000ee4 <_printf_common+0xb0>
 8000e8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000e90:	4641      	mov	r1, r8
 8000e92:	4638      	mov	r0, r7
 8000e94:	47c8      	blx	r9
 8000e96:	3001      	adds	r0, #1
 8000e98:	d01e      	beq.n	8000ed8 <_printf_common+0xa4>
 8000e9a:	6823      	ldr	r3, [r4, #0]
 8000e9c:	6922      	ldr	r2, [r4, #16]
 8000e9e:	f003 0306 	and.w	r3, r3, #6
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	bf02      	ittt	eq
 8000ea6:	68e5      	ldreq	r5, [r4, #12]
 8000ea8:	6833      	ldreq	r3, [r6, #0]
 8000eaa:	1aed      	subeq	r5, r5, r3
 8000eac:	68a3      	ldr	r3, [r4, #8]
 8000eae:	bf0c      	ite	eq
 8000eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000eb4:	2500      	movne	r5, #0
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	bfc4      	itt	gt
 8000eba:	1a9b      	subgt	r3, r3, r2
 8000ebc:	18ed      	addgt	r5, r5, r3
 8000ebe:	2600      	movs	r6, #0
 8000ec0:	341a      	adds	r4, #26
 8000ec2:	42b5      	cmp	r5, r6
 8000ec4:	d11a      	bne.n	8000efc <_printf_common+0xc8>
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	e008      	b.n	8000edc <_printf_common+0xa8>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	4652      	mov	r2, sl
 8000ece:	4641      	mov	r1, r8
 8000ed0:	4638      	mov	r0, r7
 8000ed2:	47c8      	blx	r9
 8000ed4:	3001      	adds	r0, #1
 8000ed6:	d103      	bne.n	8000ee0 <_printf_common+0xac>
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee0:	3501      	adds	r5, #1
 8000ee2:	e7c6      	b.n	8000e72 <_printf_common+0x3e>
 8000ee4:	18e1      	adds	r1, r4, r3
 8000ee6:	1c5a      	adds	r2, r3, #1
 8000ee8:	2030      	movs	r0, #48	@ 0x30
 8000eea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000eee:	4422      	add	r2, r4
 8000ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000ef4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000ef8:	3302      	adds	r3, #2
 8000efa:	e7c7      	b.n	8000e8c <_printf_common+0x58>
 8000efc:	2301      	movs	r3, #1
 8000efe:	4622      	mov	r2, r4
 8000f00:	4641      	mov	r1, r8
 8000f02:	4638      	mov	r0, r7
 8000f04:	47c8      	blx	r9
 8000f06:	3001      	adds	r0, #1
 8000f08:	d0e6      	beq.n	8000ed8 <_printf_common+0xa4>
 8000f0a:	3601      	adds	r6, #1
 8000f0c:	e7d9      	b.n	8000ec2 <_printf_common+0x8e>
	...

08000f10 <_printf_i>:
 8000f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f14:	7e0f      	ldrb	r7, [r1, #24]
 8000f16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f18:	2f78      	cmp	r7, #120	@ 0x78
 8000f1a:	4691      	mov	r9, r2
 8000f1c:	4680      	mov	r8, r0
 8000f1e:	460c      	mov	r4, r1
 8000f20:	469a      	mov	sl, r3
 8000f22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f26:	d807      	bhi.n	8000f38 <_printf_i+0x28>
 8000f28:	2f62      	cmp	r7, #98	@ 0x62
 8000f2a:	d80a      	bhi.n	8000f42 <_printf_i+0x32>
 8000f2c:	2f00      	cmp	r7, #0
 8000f2e:	f000 80d1 	beq.w	80010d4 <_printf_i+0x1c4>
 8000f32:	2f58      	cmp	r7, #88	@ 0x58
 8000f34:	f000 80b8 	beq.w	80010a8 <_printf_i+0x198>
 8000f38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f40:	e03a      	b.n	8000fb8 <_printf_i+0xa8>
 8000f42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f46:	2b15      	cmp	r3, #21
 8000f48:	d8f6      	bhi.n	8000f38 <_printf_i+0x28>
 8000f4a:	a101      	add	r1, pc, #4	@ (adr r1, 8000f50 <_printf_i+0x40>)
 8000f4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f50:	08000fa9 	.word	0x08000fa9
 8000f54:	08000fbd 	.word	0x08000fbd
 8000f58:	08000f39 	.word	0x08000f39
 8000f5c:	08000f39 	.word	0x08000f39
 8000f60:	08000f39 	.word	0x08000f39
 8000f64:	08000f39 	.word	0x08000f39
 8000f68:	08000fbd 	.word	0x08000fbd
 8000f6c:	08000f39 	.word	0x08000f39
 8000f70:	08000f39 	.word	0x08000f39
 8000f74:	08000f39 	.word	0x08000f39
 8000f78:	08000f39 	.word	0x08000f39
 8000f7c:	080010bb 	.word	0x080010bb
 8000f80:	08000fe7 	.word	0x08000fe7
 8000f84:	08001075 	.word	0x08001075
 8000f88:	08000f39 	.word	0x08000f39
 8000f8c:	08000f39 	.word	0x08000f39
 8000f90:	080010dd 	.word	0x080010dd
 8000f94:	08000f39 	.word	0x08000f39
 8000f98:	08000fe7 	.word	0x08000fe7
 8000f9c:	08000f39 	.word	0x08000f39
 8000fa0:	08000f39 	.word	0x08000f39
 8000fa4:	0800107d 	.word	0x0800107d
 8000fa8:	6833      	ldr	r3, [r6, #0]
 8000faa:	1d1a      	adds	r2, r3, #4
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	6032      	str	r2, [r6, #0]
 8000fb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e09c      	b.n	80010f6 <_printf_i+0x1e6>
 8000fbc:	6833      	ldr	r3, [r6, #0]
 8000fbe:	6820      	ldr	r0, [r4, #0]
 8000fc0:	1d19      	adds	r1, r3, #4
 8000fc2:	6031      	str	r1, [r6, #0]
 8000fc4:	0606      	lsls	r6, r0, #24
 8000fc6:	d501      	bpl.n	8000fcc <_printf_i+0xbc>
 8000fc8:	681d      	ldr	r5, [r3, #0]
 8000fca:	e003      	b.n	8000fd4 <_printf_i+0xc4>
 8000fcc:	0645      	lsls	r5, r0, #25
 8000fce:	d5fb      	bpl.n	8000fc8 <_printf_i+0xb8>
 8000fd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000fd4:	2d00      	cmp	r5, #0
 8000fd6:	da03      	bge.n	8000fe0 <_printf_i+0xd0>
 8000fd8:	232d      	movs	r3, #45	@ 0x2d
 8000fda:	426d      	negs	r5, r5
 8000fdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000fe0:	4858      	ldr	r0, [pc, #352]	@ (8001144 <_printf_i+0x234>)
 8000fe2:	230a      	movs	r3, #10
 8000fe4:	e011      	b.n	800100a <_printf_i+0xfa>
 8000fe6:	6821      	ldr	r1, [r4, #0]
 8000fe8:	6833      	ldr	r3, [r6, #0]
 8000fea:	0608      	lsls	r0, r1, #24
 8000fec:	f853 5b04 	ldr.w	r5, [r3], #4
 8000ff0:	d402      	bmi.n	8000ff8 <_printf_i+0xe8>
 8000ff2:	0649      	lsls	r1, r1, #25
 8000ff4:	bf48      	it	mi
 8000ff6:	b2ad      	uxthmi	r5, r5
 8000ff8:	2f6f      	cmp	r7, #111	@ 0x6f
 8000ffa:	4852      	ldr	r0, [pc, #328]	@ (8001144 <_printf_i+0x234>)
 8000ffc:	6033      	str	r3, [r6, #0]
 8000ffe:	bf14      	ite	ne
 8001000:	230a      	movne	r3, #10
 8001002:	2308      	moveq	r3, #8
 8001004:	2100      	movs	r1, #0
 8001006:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800100a:	6866      	ldr	r6, [r4, #4]
 800100c:	60a6      	str	r6, [r4, #8]
 800100e:	2e00      	cmp	r6, #0
 8001010:	db05      	blt.n	800101e <_printf_i+0x10e>
 8001012:	6821      	ldr	r1, [r4, #0]
 8001014:	432e      	orrs	r6, r5
 8001016:	f021 0104 	bic.w	r1, r1, #4
 800101a:	6021      	str	r1, [r4, #0]
 800101c:	d04b      	beq.n	80010b6 <_printf_i+0x1a6>
 800101e:	4616      	mov	r6, r2
 8001020:	fbb5 f1f3 	udiv	r1, r5, r3
 8001024:	fb03 5711 	mls	r7, r3, r1, r5
 8001028:	5dc7      	ldrb	r7, [r0, r7]
 800102a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800102e:	462f      	mov	r7, r5
 8001030:	42bb      	cmp	r3, r7
 8001032:	460d      	mov	r5, r1
 8001034:	d9f4      	bls.n	8001020 <_printf_i+0x110>
 8001036:	2b08      	cmp	r3, #8
 8001038:	d10b      	bne.n	8001052 <_printf_i+0x142>
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	07df      	lsls	r7, r3, #31
 800103e:	d508      	bpl.n	8001052 <_printf_i+0x142>
 8001040:	6923      	ldr	r3, [r4, #16]
 8001042:	6861      	ldr	r1, [r4, #4]
 8001044:	4299      	cmp	r1, r3
 8001046:	bfde      	ittt	le
 8001048:	2330      	movle	r3, #48	@ 0x30
 800104a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800104e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001052:	1b92      	subs	r2, r2, r6
 8001054:	6122      	str	r2, [r4, #16]
 8001056:	f8cd a000 	str.w	sl, [sp]
 800105a:	464b      	mov	r3, r9
 800105c:	aa03      	add	r2, sp, #12
 800105e:	4621      	mov	r1, r4
 8001060:	4640      	mov	r0, r8
 8001062:	f7ff fee7 	bl	8000e34 <_printf_common>
 8001066:	3001      	adds	r0, #1
 8001068:	d14a      	bne.n	8001100 <_printf_i+0x1f0>
 800106a:	f04f 30ff 	mov.w	r0, #4294967295
 800106e:	b004      	add	sp, #16
 8001070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001074:	6823      	ldr	r3, [r4, #0]
 8001076:	f043 0320 	orr.w	r3, r3, #32
 800107a:	6023      	str	r3, [r4, #0]
 800107c:	4832      	ldr	r0, [pc, #200]	@ (8001148 <_printf_i+0x238>)
 800107e:	2778      	movs	r7, #120	@ 0x78
 8001080:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001084:	6823      	ldr	r3, [r4, #0]
 8001086:	6831      	ldr	r1, [r6, #0]
 8001088:	061f      	lsls	r7, r3, #24
 800108a:	f851 5b04 	ldr.w	r5, [r1], #4
 800108e:	d402      	bmi.n	8001096 <_printf_i+0x186>
 8001090:	065f      	lsls	r7, r3, #25
 8001092:	bf48      	it	mi
 8001094:	b2ad      	uxthmi	r5, r5
 8001096:	6031      	str	r1, [r6, #0]
 8001098:	07d9      	lsls	r1, r3, #31
 800109a:	bf44      	itt	mi
 800109c:	f043 0320 	orrmi.w	r3, r3, #32
 80010a0:	6023      	strmi	r3, [r4, #0]
 80010a2:	b11d      	cbz	r5, 80010ac <_printf_i+0x19c>
 80010a4:	2310      	movs	r3, #16
 80010a6:	e7ad      	b.n	8001004 <_printf_i+0xf4>
 80010a8:	4826      	ldr	r0, [pc, #152]	@ (8001144 <_printf_i+0x234>)
 80010aa:	e7e9      	b.n	8001080 <_printf_i+0x170>
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	f023 0320 	bic.w	r3, r3, #32
 80010b2:	6023      	str	r3, [r4, #0]
 80010b4:	e7f6      	b.n	80010a4 <_printf_i+0x194>
 80010b6:	4616      	mov	r6, r2
 80010b8:	e7bd      	b.n	8001036 <_printf_i+0x126>
 80010ba:	6833      	ldr	r3, [r6, #0]
 80010bc:	6825      	ldr	r5, [r4, #0]
 80010be:	6961      	ldr	r1, [r4, #20]
 80010c0:	1d18      	adds	r0, r3, #4
 80010c2:	6030      	str	r0, [r6, #0]
 80010c4:	062e      	lsls	r6, r5, #24
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	d501      	bpl.n	80010ce <_printf_i+0x1be>
 80010ca:	6019      	str	r1, [r3, #0]
 80010cc:	e002      	b.n	80010d4 <_printf_i+0x1c4>
 80010ce:	0668      	lsls	r0, r5, #25
 80010d0:	d5fb      	bpl.n	80010ca <_printf_i+0x1ba>
 80010d2:	8019      	strh	r1, [r3, #0]
 80010d4:	2300      	movs	r3, #0
 80010d6:	6123      	str	r3, [r4, #16]
 80010d8:	4616      	mov	r6, r2
 80010da:	e7bc      	b.n	8001056 <_printf_i+0x146>
 80010dc:	6833      	ldr	r3, [r6, #0]
 80010de:	1d1a      	adds	r2, r3, #4
 80010e0:	6032      	str	r2, [r6, #0]
 80010e2:	681e      	ldr	r6, [r3, #0]
 80010e4:	6862      	ldr	r2, [r4, #4]
 80010e6:	2100      	movs	r1, #0
 80010e8:	4630      	mov	r0, r6
 80010ea:	f7ff f871 	bl	80001d0 <memchr>
 80010ee:	b108      	cbz	r0, 80010f4 <_printf_i+0x1e4>
 80010f0:	1b80      	subs	r0, r0, r6
 80010f2:	6060      	str	r0, [r4, #4]
 80010f4:	6863      	ldr	r3, [r4, #4]
 80010f6:	6123      	str	r3, [r4, #16]
 80010f8:	2300      	movs	r3, #0
 80010fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80010fe:	e7aa      	b.n	8001056 <_printf_i+0x146>
 8001100:	6923      	ldr	r3, [r4, #16]
 8001102:	4632      	mov	r2, r6
 8001104:	4649      	mov	r1, r9
 8001106:	4640      	mov	r0, r8
 8001108:	47d0      	blx	sl
 800110a:	3001      	adds	r0, #1
 800110c:	d0ad      	beq.n	800106a <_printf_i+0x15a>
 800110e:	6823      	ldr	r3, [r4, #0]
 8001110:	079b      	lsls	r3, r3, #30
 8001112:	d413      	bmi.n	800113c <_printf_i+0x22c>
 8001114:	68e0      	ldr	r0, [r4, #12]
 8001116:	9b03      	ldr	r3, [sp, #12]
 8001118:	4298      	cmp	r0, r3
 800111a:	bfb8      	it	lt
 800111c:	4618      	movlt	r0, r3
 800111e:	e7a6      	b.n	800106e <_printf_i+0x15e>
 8001120:	2301      	movs	r3, #1
 8001122:	4632      	mov	r2, r6
 8001124:	4649      	mov	r1, r9
 8001126:	4640      	mov	r0, r8
 8001128:	47d0      	blx	sl
 800112a:	3001      	adds	r0, #1
 800112c:	d09d      	beq.n	800106a <_printf_i+0x15a>
 800112e:	3501      	adds	r5, #1
 8001130:	68e3      	ldr	r3, [r4, #12]
 8001132:	9903      	ldr	r1, [sp, #12]
 8001134:	1a5b      	subs	r3, r3, r1
 8001136:	42ab      	cmp	r3, r5
 8001138:	dcf2      	bgt.n	8001120 <_printf_i+0x210>
 800113a:	e7eb      	b.n	8001114 <_printf_i+0x204>
 800113c:	2500      	movs	r5, #0
 800113e:	f104 0619 	add.w	r6, r4, #25
 8001142:	e7f5      	b.n	8001130 <_printf_i+0x220>
 8001144:	080015c7 	.word	0x080015c7
 8001148:	080015d8 	.word	0x080015d8

0800114c <__sflush_r>:
 800114c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001152:	0716      	lsls	r6, r2, #28
 8001154:	4605      	mov	r5, r0
 8001156:	460c      	mov	r4, r1
 8001158:	d454      	bmi.n	8001204 <__sflush_r+0xb8>
 800115a:	684b      	ldr	r3, [r1, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	dc02      	bgt.n	8001166 <__sflush_r+0x1a>
 8001160:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001162:	2b00      	cmp	r3, #0
 8001164:	dd48      	ble.n	80011f8 <__sflush_r+0xac>
 8001166:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001168:	2e00      	cmp	r6, #0
 800116a:	d045      	beq.n	80011f8 <__sflush_r+0xac>
 800116c:	2300      	movs	r3, #0
 800116e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001172:	682f      	ldr	r7, [r5, #0]
 8001174:	6a21      	ldr	r1, [r4, #32]
 8001176:	602b      	str	r3, [r5, #0]
 8001178:	d030      	beq.n	80011dc <__sflush_r+0x90>
 800117a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800117c:	89a3      	ldrh	r3, [r4, #12]
 800117e:	0759      	lsls	r1, r3, #29
 8001180:	d505      	bpl.n	800118e <__sflush_r+0x42>
 8001182:	6863      	ldr	r3, [r4, #4]
 8001184:	1ad2      	subs	r2, r2, r3
 8001186:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001188:	b10b      	cbz	r3, 800118e <__sflush_r+0x42>
 800118a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800118c:	1ad2      	subs	r2, r2, r3
 800118e:	2300      	movs	r3, #0
 8001190:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001192:	6a21      	ldr	r1, [r4, #32]
 8001194:	4628      	mov	r0, r5
 8001196:	47b0      	blx	r6
 8001198:	1c43      	adds	r3, r0, #1
 800119a:	89a3      	ldrh	r3, [r4, #12]
 800119c:	d106      	bne.n	80011ac <__sflush_r+0x60>
 800119e:	6829      	ldr	r1, [r5, #0]
 80011a0:	291d      	cmp	r1, #29
 80011a2:	d82b      	bhi.n	80011fc <__sflush_r+0xb0>
 80011a4:	4a28      	ldr	r2, [pc, #160]	@ (8001248 <__sflush_r+0xfc>)
 80011a6:	40ca      	lsrs	r2, r1
 80011a8:	07d6      	lsls	r6, r2, #31
 80011aa:	d527      	bpl.n	80011fc <__sflush_r+0xb0>
 80011ac:	2200      	movs	r2, #0
 80011ae:	6062      	str	r2, [r4, #4]
 80011b0:	04d9      	lsls	r1, r3, #19
 80011b2:	6922      	ldr	r2, [r4, #16]
 80011b4:	6022      	str	r2, [r4, #0]
 80011b6:	d504      	bpl.n	80011c2 <__sflush_r+0x76>
 80011b8:	1c42      	adds	r2, r0, #1
 80011ba:	d101      	bne.n	80011c0 <__sflush_r+0x74>
 80011bc:	682b      	ldr	r3, [r5, #0]
 80011be:	b903      	cbnz	r3, 80011c2 <__sflush_r+0x76>
 80011c0:	6560      	str	r0, [r4, #84]	@ 0x54
 80011c2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011c4:	602f      	str	r7, [r5, #0]
 80011c6:	b1b9      	cbz	r1, 80011f8 <__sflush_r+0xac>
 80011c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80011cc:	4299      	cmp	r1, r3
 80011ce:	d002      	beq.n	80011d6 <__sflush_r+0x8a>
 80011d0:	4628      	mov	r0, r5
 80011d2:	f7ff fbf7 	bl	80009c4 <_free_r>
 80011d6:	2300      	movs	r3, #0
 80011d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80011da:	e00d      	b.n	80011f8 <__sflush_r+0xac>
 80011dc:	2301      	movs	r3, #1
 80011de:	4628      	mov	r0, r5
 80011e0:	47b0      	blx	r6
 80011e2:	4602      	mov	r2, r0
 80011e4:	1c50      	adds	r0, r2, #1
 80011e6:	d1c9      	bne.n	800117c <__sflush_r+0x30>
 80011e8:	682b      	ldr	r3, [r5, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0c6      	beq.n	800117c <__sflush_r+0x30>
 80011ee:	2b1d      	cmp	r3, #29
 80011f0:	d001      	beq.n	80011f6 <__sflush_r+0xaa>
 80011f2:	2b16      	cmp	r3, #22
 80011f4:	d11d      	bne.n	8001232 <__sflush_r+0xe6>
 80011f6:	602f      	str	r7, [r5, #0]
 80011f8:	2000      	movs	r0, #0
 80011fa:	e021      	b.n	8001240 <__sflush_r+0xf4>
 80011fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001200:	b21b      	sxth	r3, r3
 8001202:	e01a      	b.n	800123a <__sflush_r+0xee>
 8001204:	690f      	ldr	r7, [r1, #16]
 8001206:	2f00      	cmp	r7, #0
 8001208:	d0f6      	beq.n	80011f8 <__sflush_r+0xac>
 800120a:	0793      	lsls	r3, r2, #30
 800120c:	680e      	ldr	r6, [r1, #0]
 800120e:	bf08      	it	eq
 8001210:	694b      	ldreq	r3, [r1, #20]
 8001212:	600f      	str	r7, [r1, #0]
 8001214:	bf18      	it	ne
 8001216:	2300      	movne	r3, #0
 8001218:	1bf6      	subs	r6, r6, r7
 800121a:	608b      	str	r3, [r1, #8]
 800121c:	2e00      	cmp	r6, #0
 800121e:	ddeb      	ble.n	80011f8 <__sflush_r+0xac>
 8001220:	6a21      	ldr	r1, [r4, #32]
 8001222:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001226:	4633      	mov	r3, r6
 8001228:	463a      	mov	r2, r7
 800122a:	4628      	mov	r0, r5
 800122c:	47e0      	blx	ip
 800122e:	2800      	cmp	r0, #0
 8001230:	dc07      	bgt.n	8001242 <__sflush_r+0xf6>
 8001232:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800123a:	81a3      	strh	r3, [r4, #12]
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001242:	4407      	add	r7, r0
 8001244:	1a36      	subs	r6, r6, r0
 8001246:	e7e9      	b.n	800121c <__sflush_r+0xd0>
 8001248:	20400001 	.word	0x20400001

0800124c <_fflush_r>:
 800124c:	b538      	push	{r3, r4, r5, lr}
 800124e:	690b      	ldr	r3, [r1, #16]
 8001250:	4605      	mov	r5, r0
 8001252:	460c      	mov	r4, r1
 8001254:	b913      	cbnz	r3, 800125c <_fflush_r+0x10>
 8001256:	2500      	movs	r5, #0
 8001258:	4628      	mov	r0, r5
 800125a:	bd38      	pop	{r3, r4, r5, pc}
 800125c:	b118      	cbz	r0, 8001266 <_fflush_r+0x1a>
 800125e:	6a03      	ldr	r3, [r0, #32]
 8001260:	b90b      	cbnz	r3, 8001266 <_fflush_r+0x1a>
 8001262:	f7ff faa7 	bl	80007b4 <__sinit>
 8001266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f3      	beq.n	8001256 <_fflush_r+0xa>
 800126e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001270:	07d0      	lsls	r0, r2, #31
 8001272:	d404      	bmi.n	800127e <_fflush_r+0x32>
 8001274:	0599      	lsls	r1, r3, #22
 8001276:	d402      	bmi.n	800127e <_fflush_r+0x32>
 8001278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800127a:	f7ff fba0 	bl	80009be <__retarget_lock_acquire_recursive>
 800127e:	4628      	mov	r0, r5
 8001280:	4621      	mov	r1, r4
 8001282:	f7ff ff63 	bl	800114c <__sflush_r>
 8001286:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001288:	07da      	lsls	r2, r3, #31
 800128a:	4605      	mov	r5, r0
 800128c:	d4e4      	bmi.n	8001258 <_fflush_r+0xc>
 800128e:	89a3      	ldrh	r3, [r4, #12]
 8001290:	059b      	lsls	r3, r3, #22
 8001292:	d4e1      	bmi.n	8001258 <_fflush_r+0xc>
 8001294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001296:	f7ff fb93 	bl	80009c0 <__retarget_lock_release_recursive>
 800129a:	e7dd      	b.n	8001258 <_fflush_r+0xc>

0800129c <__swbuf_r>:
 800129c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800129e:	460e      	mov	r6, r1
 80012a0:	4614      	mov	r4, r2
 80012a2:	4605      	mov	r5, r0
 80012a4:	b118      	cbz	r0, 80012ae <__swbuf_r+0x12>
 80012a6:	6a03      	ldr	r3, [r0, #32]
 80012a8:	b90b      	cbnz	r3, 80012ae <__swbuf_r+0x12>
 80012aa:	f7ff fa83 	bl	80007b4 <__sinit>
 80012ae:	69a3      	ldr	r3, [r4, #24]
 80012b0:	60a3      	str	r3, [r4, #8]
 80012b2:	89a3      	ldrh	r3, [r4, #12]
 80012b4:	071a      	lsls	r2, r3, #28
 80012b6:	d501      	bpl.n	80012bc <__swbuf_r+0x20>
 80012b8:	6923      	ldr	r3, [r4, #16]
 80012ba:	b943      	cbnz	r3, 80012ce <__swbuf_r+0x32>
 80012bc:	4621      	mov	r1, r4
 80012be:	4628      	mov	r0, r5
 80012c0:	f000 f82a 	bl	8001318 <__swsetup_r>
 80012c4:	b118      	cbz	r0, 80012ce <__swbuf_r+0x32>
 80012c6:	f04f 37ff 	mov.w	r7, #4294967295
 80012ca:	4638      	mov	r0, r7
 80012cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012ce:	6823      	ldr	r3, [r4, #0]
 80012d0:	6922      	ldr	r2, [r4, #16]
 80012d2:	1a98      	subs	r0, r3, r2
 80012d4:	6963      	ldr	r3, [r4, #20]
 80012d6:	b2f6      	uxtb	r6, r6
 80012d8:	4283      	cmp	r3, r0
 80012da:	4637      	mov	r7, r6
 80012dc:	dc05      	bgt.n	80012ea <__swbuf_r+0x4e>
 80012de:	4621      	mov	r1, r4
 80012e0:	4628      	mov	r0, r5
 80012e2:	f7ff ffb3 	bl	800124c <_fflush_r>
 80012e6:	2800      	cmp	r0, #0
 80012e8:	d1ed      	bne.n	80012c6 <__swbuf_r+0x2a>
 80012ea:	68a3      	ldr	r3, [r4, #8]
 80012ec:	3b01      	subs	r3, #1
 80012ee:	60a3      	str	r3, [r4, #8]
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	6022      	str	r2, [r4, #0]
 80012f6:	701e      	strb	r6, [r3, #0]
 80012f8:	6962      	ldr	r2, [r4, #20]
 80012fa:	1c43      	adds	r3, r0, #1
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d004      	beq.n	800130a <__swbuf_r+0x6e>
 8001300:	89a3      	ldrh	r3, [r4, #12]
 8001302:	07db      	lsls	r3, r3, #31
 8001304:	d5e1      	bpl.n	80012ca <__swbuf_r+0x2e>
 8001306:	2e0a      	cmp	r6, #10
 8001308:	d1df      	bne.n	80012ca <__swbuf_r+0x2e>
 800130a:	4621      	mov	r1, r4
 800130c:	4628      	mov	r0, r5
 800130e:	f7ff ff9d 	bl	800124c <_fflush_r>
 8001312:	2800      	cmp	r0, #0
 8001314:	d0d9      	beq.n	80012ca <__swbuf_r+0x2e>
 8001316:	e7d6      	b.n	80012c6 <__swbuf_r+0x2a>

08001318 <__swsetup_r>:
 8001318:	b538      	push	{r3, r4, r5, lr}
 800131a:	4b29      	ldr	r3, [pc, #164]	@ (80013c0 <__swsetup_r+0xa8>)
 800131c:	4605      	mov	r5, r0
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	460c      	mov	r4, r1
 8001322:	b118      	cbz	r0, 800132c <__swsetup_r+0x14>
 8001324:	6a03      	ldr	r3, [r0, #32]
 8001326:	b90b      	cbnz	r3, 800132c <__swsetup_r+0x14>
 8001328:	f7ff fa44 	bl	80007b4 <__sinit>
 800132c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001330:	0719      	lsls	r1, r3, #28
 8001332:	d422      	bmi.n	800137a <__swsetup_r+0x62>
 8001334:	06da      	lsls	r2, r3, #27
 8001336:	d407      	bmi.n	8001348 <__swsetup_r+0x30>
 8001338:	2209      	movs	r2, #9
 800133a:	602a      	str	r2, [r5, #0]
 800133c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001340:	81a3      	strh	r3, [r4, #12]
 8001342:	f04f 30ff 	mov.w	r0, #4294967295
 8001346:	e033      	b.n	80013b0 <__swsetup_r+0x98>
 8001348:	0758      	lsls	r0, r3, #29
 800134a:	d512      	bpl.n	8001372 <__swsetup_r+0x5a>
 800134c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800134e:	b141      	cbz	r1, 8001362 <__swsetup_r+0x4a>
 8001350:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001354:	4299      	cmp	r1, r3
 8001356:	d002      	beq.n	800135e <__swsetup_r+0x46>
 8001358:	4628      	mov	r0, r5
 800135a:	f7ff fb33 	bl	80009c4 <_free_r>
 800135e:	2300      	movs	r3, #0
 8001360:	6363      	str	r3, [r4, #52]	@ 0x34
 8001362:	89a3      	ldrh	r3, [r4, #12]
 8001364:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001368:	81a3      	strh	r3, [r4, #12]
 800136a:	2300      	movs	r3, #0
 800136c:	6063      	str	r3, [r4, #4]
 800136e:	6923      	ldr	r3, [r4, #16]
 8001370:	6023      	str	r3, [r4, #0]
 8001372:	89a3      	ldrh	r3, [r4, #12]
 8001374:	f043 0308 	orr.w	r3, r3, #8
 8001378:	81a3      	strh	r3, [r4, #12]
 800137a:	6923      	ldr	r3, [r4, #16]
 800137c:	b94b      	cbnz	r3, 8001392 <__swsetup_r+0x7a>
 800137e:	89a3      	ldrh	r3, [r4, #12]
 8001380:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001384:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001388:	d003      	beq.n	8001392 <__swsetup_r+0x7a>
 800138a:	4621      	mov	r1, r4
 800138c:	4628      	mov	r0, r5
 800138e:	f000 f84f 	bl	8001430 <__smakebuf_r>
 8001392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001396:	f013 0201 	ands.w	r2, r3, #1
 800139a:	d00a      	beq.n	80013b2 <__swsetup_r+0x9a>
 800139c:	2200      	movs	r2, #0
 800139e:	60a2      	str	r2, [r4, #8]
 80013a0:	6962      	ldr	r2, [r4, #20]
 80013a2:	4252      	negs	r2, r2
 80013a4:	61a2      	str	r2, [r4, #24]
 80013a6:	6922      	ldr	r2, [r4, #16]
 80013a8:	b942      	cbnz	r2, 80013bc <__swsetup_r+0xa4>
 80013aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80013ae:	d1c5      	bne.n	800133c <__swsetup_r+0x24>
 80013b0:	bd38      	pop	{r3, r4, r5, pc}
 80013b2:	0799      	lsls	r1, r3, #30
 80013b4:	bf58      	it	pl
 80013b6:	6962      	ldrpl	r2, [r4, #20]
 80013b8:	60a2      	str	r2, [r4, #8]
 80013ba:	e7f4      	b.n	80013a6 <__swsetup_r+0x8e>
 80013bc:	2000      	movs	r0, #0
 80013be:	e7f7      	b.n	80013b0 <__swsetup_r+0x98>
 80013c0:	2000000c 	.word	0x2000000c

080013c4 <_sbrk_r>:
 80013c4:	b538      	push	{r3, r4, r5, lr}
 80013c6:	4d06      	ldr	r5, [pc, #24]	@ (80013e0 <_sbrk_r+0x1c>)
 80013c8:	2300      	movs	r3, #0
 80013ca:	4604      	mov	r4, r0
 80013cc:	4608      	mov	r0, r1
 80013ce:	602b      	str	r3, [r5, #0]
 80013d0:	f7ff f904 	bl	80005dc <_sbrk>
 80013d4:	1c43      	adds	r3, r0, #1
 80013d6:	d102      	bne.n	80013de <_sbrk_r+0x1a>
 80013d8:	682b      	ldr	r3, [r5, #0]
 80013da:	b103      	cbz	r3, 80013de <_sbrk_r+0x1a>
 80013dc:	6023      	str	r3, [r4, #0]
 80013de:	bd38      	pop	{r3, r4, r5, pc}
 80013e0:	200001b8 	.word	0x200001b8

080013e4 <__swhatbuf_r>:
 80013e4:	b570      	push	{r4, r5, r6, lr}
 80013e6:	460c      	mov	r4, r1
 80013e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013ec:	2900      	cmp	r1, #0
 80013ee:	b096      	sub	sp, #88	@ 0x58
 80013f0:	4615      	mov	r5, r2
 80013f2:	461e      	mov	r6, r3
 80013f4:	da0d      	bge.n	8001412 <__swhatbuf_r+0x2e>
 80013f6:	89a3      	ldrh	r3, [r4, #12]
 80013f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80013fc:	f04f 0100 	mov.w	r1, #0
 8001400:	bf14      	ite	ne
 8001402:	2340      	movne	r3, #64	@ 0x40
 8001404:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001408:	2000      	movs	r0, #0
 800140a:	6031      	str	r1, [r6, #0]
 800140c:	602b      	str	r3, [r5, #0]
 800140e:	b016      	add	sp, #88	@ 0x58
 8001410:	bd70      	pop	{r4, r5, r6, pc}
 8001412:	466a      	mov	r2, sp
 8001414:	f000 f848 	bl	80014a8 <_fstat_r>
 8001418:	2800      	cmp	r0, #0
 800141a:	dbec      	blt.n	80013f6 <__swhatbuf_r+0x12>
 800141c:	9901      	ldr	r1, [sp, #4]
 800141e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001422:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001426:	4259      	negs	r1, r3
 8001428:	4159      	adcs	r1, r3
 800142a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800142e:	e7eb      	b.n	8001408 <__swhatbuf_r+0x24>

08001430 <__smakebuf_r>:
 8001430:	898b      	ldrh	r3, [r1, #12]
 8001432:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001434:	079d      	lsls	r5, r3, #30
 8001436:	4606      	mov	r6, r0
 8001438:	460c      	mov	r4, r1
 800143a:	d507      	bpl.n	800144c <__smakebuf_r+0x1c>
 800143c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001440:	6023      	str	r3, [r4, #0]
 8001442:	6123      	str	r3, [r4, #16]
 8001444:	2301      	movs	r3, #1
 8001446:	6163      	str	r3, [r4, #20]
 8001448:	b003      	add	sp, #12
 800144a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800144c:	ab01      	add	r3, sp, #4
 800144e:	466a      	mov	r2, sp
 8001450:	f7ff ffc8 	bl	80013e4 <__swhatbuf_r>
 8001454:	9f00      	ldr	r7, [sp, #0]
 8001456:	4605      	mov	r5, r0
 8001458:	4639      	mov	r1, r7
 800145a:	4630      	mov	r0, r6
 800145c:	f7ff fb1e 	bl	8000a9c <_malloc_r>
 8001460:	b948      	cbnz	r0, 8001476 <__smakebuf_r+0x46>
 8001462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001466:	059a      	lsls	r2, r3, #22
 8001468:	d4ee      	bmi.n	8001448 <__smakebuf_r+0x18>
 800146a:	f023 0303 	bic.w	r3, r3, #3
 800146e:	f043 0302 	orr.w	r3, r3, #2
 8001472:	81a3      	strh	r3, [r4, #12]
 8001474:	e7e2      	b.n	800143c <__smakebuf_r+0xc>
 8001476:	89a3      	ldrh	r3, [r4, #12]
 8001478:	6020      	str	r0, [r4, #0]
 800147a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800147e:	81a3      	strh	r3, [r4, #12]
 8001480:	9b01      	ldr	r3, [sp, #4]
 8001482:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001486:	b15b      	cbz	r3, 80014a0 <__smakebuf_r+0x70>
 8001488:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800148c:	4630      	mov	r0, r6
 800148e:	f000 f81d 	bl	80014cc <_isatty_r>
 8001492:	b128      	cbz	r0, 80014a0 <__smakebuf_r+0x70>
 8001494:	89a3      	ldrh	r3, [r4, #12]
 8001496:	f023 0303 	bic.w	r3, r3, #3
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	81a3      	strh	r3, [r4, #12]
 80014a0:	89a3      	ldrh	r3, [r4, #12]
 80014a2:	431d      	orrs	r5, r3
 80014a4:	81a5      	strh	r5, [r4, #12]
 80014a6:	e7cf      	b.n	8001448 <__smakebuf_r+0x18>

080014a8 <_fstat_r>:
 80014a8:	b538      	push	{r3, r4, r5, lr}
 80014aa:	4d07      	ldr	r5, [pc, #28]	@ (80014c8 <_fstat_r+0x20>)
 80014ac:	2300      	movs	r3, #0
 80014ae:	4604      	mov	r4, r0
 80014b0:	4608      	mov	r0, r1
 80014b2:	4611      	mov	r1, r2
 80014b4:	602b      	str	r3, [r5, #0]
 80014b6:	f7ff f86b 	bl	8000590 <_fstat>
 80014ba:	1c43      	adds	r3, r0, #1
 80014bc:	d102      	bne.n	80014c4 <_fstat_r+0x1c>
 80014be:	682b      	ldr	r3, [r5, #0]
 80014c0:	b103      	cbz	r3, 80014c4 <_fstat_r+0x1c>
 80014c2:	6023      	str	r3, [r4, #0]
 80014c4:	bd38      	pop	{r3, r4, r5, pc}
 80014c6:	bf00      	nop
 80014c8:	200001b8 	.word	0x200001b8

080014cc <_isatty_r>:
 80014cc:	b538      	push	{r3, r4, r5, lr}
 80014ce:	4d06      	ldr	r5, [pc, #24]	@ (80014e8 <_isatty_r+0x1c>)
 80014d0:	2300      	movs	r3, #0
 80014d2:	4604      	mov	r4, r0
 80014d4:	4608      	mov	r0, r1
 80014d6:	602b      	str	r3, [r5, #0]
 80014d8:	f7ff f869 	bl	80005ae <_isatty>
 80014dc:	1c43      	adds	r3, r0, #1
 80014de:	d102      	bne.n	80014e6 <_isatty_r+0x1a>
 80014e0:	682b      	ldr	r3, [r5, #0]
 80014e2:	b103      	cbz	r3, 80014e6 <_isatty_r+0x1a>
 80014e4:	6023      	str	r3, [r4, #0]
 80014e6:	bd38      	pop	{r3, r4, r5, pc}
 80014e8:	200001b8 	.word	0x200001b8

080014ec <_init>:
 80014ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ee:	bf00      	nop
 80014f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014f2:	bc08      	pop	{r3}
 80014f4:	469e      	mov	lr, r3
 80014f6:	4770      	bx	lr

080014f8 <_fini>:
 80014f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fa:	bf00      	nop
 80014fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014fe:	bc08      	pop	{r3}
 8001500:	469e      	mov	lr, r3
 8001502:	4770      	bx	lr
